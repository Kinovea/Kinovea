<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PylonC.NET</name>
    </assembly>
    <members>
        <member name="T:PylonC.NET.NodeCallbackHandler">
            <summary>
            Wraps the PylonC callback and provides an event for the callback.
            </summary>
        </member>
        <member name="M:PylonC.NET.NodeCallbackHandler.#ctor">
            <summary>
            Creates a new callback handler for node callbacks.
            </summary>
        </member>
        <member name="T:PylonC.NET.NodeCallbackHandler.NodeCallback">
            <summary>
            Prototype of a callback handling method
            </summary>
            <param name="hNode">Handle of the node causing the callback.</param>
        </member>
        <member name="E:PylonC.NET.NodeCallbackHandler.CallbackEvent">
            <summary>
            Can be used to register for the callback event.
            </summary>
        </member>
        <member name="M:PylonC.NET.NodeCallbackHandler.OnCallbackEvent(PylonC.NET.NODE_HANDLE)">
            <summary>
            Notifies registered classes in case of a callback.
            </summary>
            <param name="hNode">Handle of the node causing the callback.</param>
        </member>
        <member name="T:PylonC.NET.DeviceCallbackHandler">
            <summary>
            Wraps the PylonC callback and provides an event for the callback.
            </summary>
        </member>
        <member name="M:PylonC.NET.DeviceCallbackHandler.#ctor">
            <summary>
            Creates a new callback handler for device removal callbacks.
            </summary>
        </member>
        <member name="T:PylonC.NET.DeviceCallbackHandler.DeviceCallback">
            <summary>
            Prototype of a callback handling method
            </summary>
            <param name="hDev">Handle of the device causing the callback.</param>
        </member>
        <member name="E:PylonC.NET.DeviceCallbackHandler.CallbackEvent">
            <summary>
            Can be used to register for the callback event.
            </summary>
        </member>
        <member name="M:PylonC.NET.DeviceCallbackHandler.OnCallbackEvent(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Notifies registered classes in case of a callback.
            </summary>
            <param name="hDev">Handle of the device causing the callback.</param>
        </member>
        <member name="T:PylonC.NET.NODEMAP_HANDLE">
            <summary>
            A handle for a node map object.
            </summary>
        </member>
        <member name="T:PylonC.NET.NODE_CALLBACK_HANDLE">
            <summary>
            A handle for a node callback object.
            </summary>
        </member>
        <member name="T:PylonC.NET.GENAPI_FILE_HANDLE">
            <summary>
            A handle for a file object.
            </summary>
        </member>
        <member name="T:PylonC.NET.NODE_HANDLE">
            <summary>
            A handle for a node object.
            </summary>
        </member>
        <member name="T:PylonC.NET.EGenApiNodeType">
            <summary>
            Node type. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.IntegerNode">
            <summary>
            Node represents an integer-valued parameter. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.BooleanNode">
            <summary>
            Node represents a boolean (true/false) parameter. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.FloatNode">
            <summary>
            Node represents a floating point-valued parameter. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.CommandNode">
            <summary>
            Node can trigger a command. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.StringNode">
            <summary>
            Node represents a string-valued parameter. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.EnumerationNode">
            <summary>
            Node represents an enumeration-valued parameter. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.EnumEntryNode">
            <summary>
            Node represents an 'enumeration entry' parameter. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType.Category">
            <summary>
            Node for grouping parameters in a category. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNodeType._UnknownNodeType">
            <summary>
            Node type invalid. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EGenApiAccessMode">
            <summary>
            Access mode of a node. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiAccessMode.NI">
            <summary>
            Not implemented. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiAccessMode.NA">
            <summary>
            Not available. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiAccessMode.WO">
            <summary>
            Write Only. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiAccessMode.RO">
            <summary>
            Read Only. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiAccessMode.RW">
            <summary>
            Read and Write. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiAccessMode._UndefinedAccesMode">
            <summary>
            Access mode invalid. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EGenApiNameSpace">
            <summary>
            Node name spaces. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNameSpace.Custom">
            <summary>
            Name resides in custom name space. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNameSpace.Standard">
            <summary>
            Name resides in one of the standard name spaces. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiNameSpace._UndefinedNameSpace">
            <summary>
            Name space invalid. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EGenApiVisibility">
            <summary>
            Node visibility. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiVisibility.Beginner">
            <summary>
            Visible to everyone. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiVisibility.Expert">
            <summary>
            Visible to experts or gurus only. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiVisibility.Guru">
            <summary>
            Visible to gurus only. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiVisibility.Invisible">
            <summary>
            Not visible at all. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiVisibility._UndefinedVisibility">
            <summary>
            Visibility invalid. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EGenApiCachingMode">
            <summary>
            Node caching modes. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiCachingMode.NoCache">
            <summary>
            Do not use cache. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiCachingMode.WriteThrough">
            <summary>
            Write to cache and register. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiCachingMode.WriteAround">
            <summary>
            Write to register, write to cache on read. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiCachingMode._UndefinedCachingMode">
            <summary>
            Caching mode invalid. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EGenApiRepresentation">
            <summary>
            Node representation. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiRepresentation.Linear">
            <summary>
            Slider with linear behavior. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiRepresentation.Logarithmic">
            <summary>
            Slider with logarithmic behavior. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiRepresentation.Boolean">
            <summary>
            Checkbox. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiRepresentation.PureNumber">
            <summary>
            Decimal number in an edit control. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiRepresentation.HexNumber">
            <summary>
            Hex number in an edit control. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiRepresentation._UndefinedRepresentation">
            <summary>
            Representation invalid. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EGenApiFileAccessMode">
            <summary>
            File access modes. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiFileAccessMode.GenApiFileReadAccess">
            <summary>
            For specifying file read access on file open. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EGenApiFileAccessMode.GenApiFileWriteAccess">
            <summary>
            For specifying file write access on file open. 
            </summary>
        </member>
        <member name="T:PylonC.NET.GenApi">
            <summary>
            GenICam Interface
            </summary>
        </member>
        <member name="M:PylonC.NET.GenApi.NodeMapGetNode(PylonC.NET.NODEMAP_HANDLE,System.String)">
            <summary>
            Find a node by its name. 
            </summary>
            <param name="hMap">
            Node map handle 
            </param>
            <param name="name">
            Node name to find 
            </param>
            <returns>
            Handle of the node identified by the name 
            </returns>
            
            Use this function to search a node map for a node with a given name. An invalid handle is returned if not found. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeMapGetNumNodes(PylonC.NET.NODEMAP_HANDLE)">
            <summary>
            Get the number of nodes contained in a node map. 
            </summary>
            <param name="hMap">
            Node map handle 
            </param>
            <returns>
            The number of nodes in the node map 
            </returns>
            
            Return the number of nodes contained in a node map. This value can be used to traverse a node map, visiting every node using GenApi.NodeMapGetNodeByIndex(). 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeMapGetNodeByIndex(PylonC.NET.NODEMAP_HANDLE,System.UInt32)">
            <summary>
            Find a node by its index. 
            </summary>
            <param name="hMap">
            Node map handle 
            </param>
            <param name="index">
            Index of node to get 
            </param>
            <returns>
            Handle of the node identified by the index 
            </returns>
            
            Translate a numerical index to a node handle. By using GenApi.NodeMapGetNumNodes() to get the number of nodes in a node map, this function can be used to get a handle for every node contained, without having to know its name. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeMapPoll(PylonC.NET.NODEMAP_HANDLE,System.Int64)">
            <summary>
            Poll all nodes in a node map. 
            </summary>
            <param name="hMap">
            Node map handle 
            </param>
            <param name="timestamp">
            Current time stamp in ms 
            </param>
            
            Poll all nodes in the node map and execute callbacks for those that are expired. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetAccessMode(PylonC.NET.NODE_HANDLE)">
            <summary>
            Query node for allowed access modes. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The Access modes of the node 
            </returns>
            
            The value returned indicates what kinds of access are allowed for the node referred to by hNode. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetNameSpace(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a node's name space. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The name space of the node 
            </returns>
            
            Query the node represented by hNode for the name space (custom or standard) it belongs to. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetVisibility(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a node's visibility. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The visibility of the node 
            </returns>
            
            Query the node represented by hNode for its level of visibility (Beginner, Expert, Guru, or Invisible). 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeInvalidateNode(PylonC.NET.NODE_HANDLE)">
            <summary>
            Mark node as possibly changed. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            
            Calling this function invalidates the currently cached status for the node. Then, callbacks for all dependent nodes are triggered. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetCachingMode(PylonC.NET.NODE_HANDLE)">
            <summary>
            Query node for its caching mode. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The caching mode of the node 
            </returns>
            
            Caching may be implemented differently for nodes with different characteristics. There is an enumerated type EGenApiCachingMode that is used to encode the caching strategy for a particular node. Use this function to get a node's caching mode. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetType(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get node type. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The type of the node 
            </returns>
            
            Query the node represented by hNode for its type. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetPollingTime(PylonC.NET.NODE_HANDLE)">
            <summary>
            Query a node for its recommended polling interval. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The recommended polling interval of the node 
            </returns>
            
            Nodes that are subject to asynchronous state changes must be periodically queried (polled) in order to detect state changes. Such nodes have an associated attribute specifying a recommended polling interval in milliseconds. Use this function to get that value. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeImposeAccessMode(PylonC.NET.NODE_HANDLE,PylonC.NET.EGenApiAccessMode)">
            <summary>
            Modify a node's accessibility. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="imposedAccessMode">
            Desired new access mode 
            </param>
            
            Whether a particular node allows read, write, or any access at all, is encoded in its access mode. The original access mode for a node, which is computed taking into account node interdependencies, can be further restricted by means of this function. It is not possible to set the access mode to one more permissive than the original mode. An attempt to do so will be ignored. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeImposeVisibility(PylonC.NET.NODE_HANDLE,PylonC.NET.EGenApiVisibility)">
            <summary>
            Modify a node's visibility. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="imposedVisibility">
            Desired new visibility 
            </param>
            
            A particular node is only visible if the current user level is set at least as high as the node's visibility. This function can be used to further limit a node's visibility. The function cannot be used to increase a node's visibility (so that it would become visible at a lower user level). Any attempt to do so will have no effect. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeFromStringEx(PylonC.NET.NODE_HANDLE,System.Boolean,System.String)">
            <summary>
            Set a node's value from a text string with optional validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="verify">
            Boolean switch to enable validation 
            </param>
            <param name="aString">
            Value to set as text string 
            </param>
            
            This function takes a text string in aString and tries to convert it to a value to set the node to. This may fail for a number of reasons, e.g. due to the node not being writeable or not having a value that could be set. If verify equals true, the function will also fail if the value to be set conflicts with any relevant constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeFromString(PylonC.NET.NODE_HANDLE,System.String)">
            <summary>
            Set a node's value from a text string with mandatory validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="aString">
            Value to set as text string 
            </param>
            
            This function takes a text string in aString and tries to convert it to a value to set the node to. This may fail for a number of reasons, e.g. due to the node not being writeable or not having a value that could be set. The function will also fail if the value to be set conflicts with any relevant constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetAlias(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get a node's alias. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            Handle of the alias node 
            </returns>
            
            This function returns a node's alias if available. An invalid handle is returned if no alias exists. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerSetValue(PylonC.NET.NODE_HANDLE,System.Int64)">
            <summary>
            Set a node's integer value with mandatory validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="value">
            Value to set 
            </param>
            
            Set the node to a particular value. The function will fail if the value to be set conflicts with any relevant constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerSetValueEx(PylonC.NET.NODE_HANDLE,System.Boolean,System.Int64)">
            <summary>
            Set a node's integer value with optional validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="verify">
            Boolean switch to enable validation 
            </param>
            <param name="value">
            Value to set 
            </param>
            
            Set the node to a particular value. If verify equals true, the function will fail if the value to be set conflicts with any relevant constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerGetValue(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get a node's integer value without validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The integer value of the node 
            </returns>
            
            Return the integer value of a node. No validation is performed on the value returned. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerGetValueEx(PylonC.NET.NODE_HANDLE,System.Boolean)">
            <summary>
            Return a node's integer value with optional validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="verify">
            Boolean switch to enable validation 
            </param>
            <returns>
            The integer value of the node 
            </returns>
            
            Return the integer value of a node. If verify equals true, the result value is checked to ensure that it does not violate any of the node's constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerGetMin(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get the minimum value from an integer node. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The minimum integer value of the node 
            </returns>
            
            Return the minimum integer value of a node. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerGetMax(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get the maximum value from an integer node. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The maximum integer value of the node 
            </returns>
            
            Return the maximum integer value of a node. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerGetInc(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get the value increment from an integer node. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The node's minimum integer value increment 
            </returns>
            
            Return the integer value increment of a node. 
        </member>
        <member name="M:PylonC.NET.GenApi.IntegerGetRepresentation(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get a node's preferred representation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The node's preferred representation 
            </returns>
            
            Return the preferred representation for the node's value. This value is a hint telling how the value should best be represented in a graphical user interface. 
        </member>
        <member name="M:PylonC.NET.GenApi.BooleanSetValue(PylonC.NET.NODE_HANDLE,System.Boolean)">
            <summary>
            Set a node's boolean value. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="value">
            Boolean value to set 
            </param>
            
            Set the node to a particular boolean value. The function will fail if the node is of a type that has no such value. 
        </member>
        <member name="M:PylonC.NET.GenApi.BooleanGetValue(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a node's boolean value. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The boolean value of the node 
            </returns>
            
            Get the boolean value of a node. The function will fail if the node is of a type that has no such value. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatSetValue(PylonC.NET.NODE_HANDLE,System.Double)">
            <summary>
            Set a node's floating-point value with mandatory validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="value">
            Value to set 
            </param>
            
            Set the node to a particular value. The function will fail if the value to be set conflicts with any relevant constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatSetValueEx(PylonC.NET.NODE_HANDLE,System.Boolean,System.Double)">
            <summary>
            Set a node's floating-point value with optional validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="verify">
            Boolean switch to enable validation 
            </param>
            <param name="value">
            Value to set 
            </param>
            
            Set the node to a particular value. If verify equals true, the function will fail if the value to be set conflicts with any relevant constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatGetValue(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get a node's floating-point value without validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The node's floating-point value 
            </returns>
            
            Return the floating-point value of a node. No validation is performed on the value returned. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatGetValueEx(PylonC.NET.NODE_HANDLE,System.Boolean)">
            <summary>
            Return a node's floating-point value with optional validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="verify">
            Boolean switch to enable validation 
            </param>
            <returns>
            The node's floating-point value 
            </returns>
            
            Return the floating-point value of a node. If verify equals true, the result value is checked to ensure that it does not violate any of the node's constraints. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatGetMin(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get a node's minimum floating-point value. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The node's minimum floating-point value 
            </returns>
            
            Return the minimum floating-point value of a node. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatGetMax(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get a node's maximum floating-point value. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The node's maximum floating-point value 
            </returns>
            
            Return the maximum floating-point value of a node. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatGetRepresentation(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get a node's preferred representation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The node's preferred representation 
            </returns>
            
            Return the preferred representation for the node's value. This value is a hint telling how the value should best be represented in a graphical user interface. 
        </member>
        <member name="M:PylonC.NET.GenApi.CommandExecute(PylonC.NET.NODE_HANDLE)">
            <summary>
            Trigger the execution of a command. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            
            Execute the command associated with a command node. 
        </member>
        <member name="M:PylonC.NET.GenApi.CommandIsDone(PylonC.NET.NODE_HANDLE)">
            <summary>
            Check whether command has finished. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            True if the command is finished 
            </returns>
            
            After initiating a command using GenApi.CommandExecute(), use this function to check whether the command has run to completion. 
        </member>
        <member name="M:PylonC.NET.GenApi.EnumerationGetNumEntries(PylonC.NET.NODE_HANDLE)">
            <summary>
            Get the number of entries in an enumeration. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The number of entries in the enumeration 
            </returns>
            
            Get the number of entries for an enumeration node. 
        </member>
        <member name="M:PylonC.NET.GenApi.EnumerationGetEntryByIndex(PylonC.NET.NODE_HANDLE,System.UInt32)">
            <summary>
            Get an entry from an enumeration by index. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="index">
            Index of entry to get 
            </param>
            <returns>
            Handle of the node in the enumeration identified by the index 
            </returns>
            
            Return a handle for an enumeration entry node identified by a numerical index. Using the number of entries returned by GenApi.EnumerationGetNumEntries(), this can be used to iterate over every enumeration entry contained in an enumeration. 
        </member>
        <member name="M:PylonC.NET.GenApi.EnumerationGetEntryByName(PylonC.NET.NODE_HANDLE,System.String)">
            <summary>
            Get an entry from an enumeration by name. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="name">
            Name of entry to get 
            </param>
            <returns>
            Handle of the node in the enumeration identified by the name. An invalid handle is returned if entry is not found. 
            </returns>
            
            Return a handle for an enumeration entry node identified by its name. 
        </member>
        <member name="M:PylonC.NET.GenApi.EnumerationEntryGetValue(PylonC.NET.NODE_HANDLE)">
            <summary>
            Returns the numerical index of an enumeration entry. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The numerical index of the enumeration entry 
            </returns>
            
            Return the numerical index of an 'enumeration entry' node. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeIsImplemented(PylonC.NET.NODE_HANDLE)">
            <summary>
            Check whether a feature is implemented. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            True if node exists 
            </returns>
            
            Check whether the feature represented by hNode is actually implemented (GenApi.NodeGetAccessMode() returns not NI). 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeIsReadable(PylonC.NET.NODE_HANDLE)">
            <summary>
            Check whether a feature's value is readable. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            True if node can be read 
            </returns>
            
            Check whether the value of the feature represented by hNode can be read (GenApi.NodeGetAccessMode() returns RO or RW). 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeIsWritable(PylonC.NET.NODE_HANDLE)">
            <summary>
            Check whether a feature's value is writable. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            True if node is writable 
            </returns>
            
            Check whether the value of the feature represented by hNode can be written (GenApi.NodeGetAccessMode() returns WO or RW). 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeIsAvailable(PylonC.NET.NODE_HANDLE)">
            <summary>
            Check whether a feature's value is available. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            True if node is accessible 
            </returns>
            
            Check whether the value of the feature represented by hNode is currently accessible (GenApi.NodeGetAccessMode() returns neither NA nor NI). 
        </member>
        <member name="M:PylonC.NET.GenApi.CategoryGetNumFeatures(PylonC.NET.NODE_HANDLE)">
            <summary>
            Returns the number of features in a category. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The number of feature nodes
            </returns>
            
            Return the number of feature nodes that a category node manages. 
        </member>
        <member name="M:PylonC.NET.GenApi.CategoryGetFeatureByIndex(PylonC.NET.NODE_HANDLE,System.UInt32)">
            <summary>
            Get a feature node from a category by its index. 
            </summary>
            <param name="hNode">
            Category node handle 
            </param>
            <param name="index">
            Index in category 
            </param>
            <returns>
            Handle of the node in the category 
            </returns>
            
            Returns a NODE_HANDLE for a feature node identified by its index. Using the value returned by GenApi.CategoryGetNumFeatures(), this can be used to implement a loop to iterate over all feature nodes in a given category. 
        </member>
        <member name="M:PylonC.NET.GenApi.FilesAreSupported(PylonC.NET.NODEMAP_HANDLE)">
            <summary>
            Check whether the device supports accessing files. 
            </summary>
            <param name="hMap">
            Device Node map handle. 
            </param>
            <returns>
            Returns true if files are supported. 
            </returns>
            
            Check whether the device supports accessing files. 
        </member>
        <member name="M:PylonC.NET.GenApi.FileExists(PylonC.NET.NODEMAP_HANDLE,System.String)">
            <summary>
            Check whether a file exists. 
            </summary>
            <param name="hMap">
            Device Node map handle. 
            </param>
            <param name="fileName">
            The name of the file. 
            </param>
            <returns>
            Returns true if the file exists. 
            </returns>
            
            Check whether a file exists. 
        </member>
        <member name="M:PylonC.NET.GenApi.FileOpen(PylonC.NET.NODEMAP_HANDLE,System.String,PylonC.NET.EGenApiFileAccessMode)">
            <summary>
            Opens a file. 
            </summary>
            <param name="hMap">
            Device Node map handle. 
            </param>
            <param name="fileName">
            The name of the file. 
            </param>
            <param name="accessMode">
            Specifies read or write access. 
            </param>
            <returns>
            Returns the file handle. 
            </returns>
            
            Only one file can be opened at a time per node map. The file is automatically closed if the node map is destroyed. 
        </member>
        <member name="M:PylonC.NET.GenApi.FileClose(PylonC.NET.GENAPI_FILE_HANDLE)">
            <summary>
            Closes a file. 
            </summary>
            <param name="hFile">
            The file handle. 
            </param>
            
            Closes a file. The handle is invalid after closing. 
        </member>
        <member name="M:PylonC.NET.GenApi.SelectorGetNumSelectingFeatures(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return the number of selecting features. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            Number of selecting features
            </returns>
            
            Returns the number of features selecting this node. 
        </member>
        <member name="M:PylonC.NET.GenApi.SelectorGetSelectingFeatureByIndex(PylonC.NET.NODE_HANDLE,System.UInt32)">
            <summary>
            Return a selecting feature by its index. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="index">
            Index in selectors 
            </param>
            <returns>
            Handle of the selecting feature 
            </returns>
            
            A feature node may be selected by one or more other features. This function returns a NODE_HANDLE for a selector node identified by its index. Using the value returned by GenApi.NodeGetNumSelectingFeatures(), this can be used to implement a loop to iterate over all selectors of a given node. 
        </member>
        <member name="M:PylonC.NET.GenApi.SelectorGetNumSelectedFeatures(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return the number of selected nodes. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            Number of selected nodes
            </returns>
            
            Returns the number of nodes selected by this node. 
        </member>
        <member name="M:PylonC.NET.GenApi.SelectorGetSelectedFeatureByIndex(PylonC.NET.NODE_HANDLE,System.UInt32)">
            <summary>
            Get a selected node by its index. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="index">
            Index in selected nodes 
            </param>
            <returns>
            Handle of the selected node 
            </returns>
            
            A feature node may select one or more other features. This function returns a NODE_HANDLE for a selected node identified by its index. Using the value returned by GenApi.NodeGetNumSelectedFeatures(), this can be used to implement a loop to iterate over all selected nodes of a given node. 
        </member>
        <member name="M:PylonC.NET.GenApi.GetLastErrorMessage">
            <summary>
            Return a brief textual description of the latest error. 
            </summary>
            <returns>
            The brief textual description of the latest error 
            </returns>
            
            Whenever a function reports an error, it also sets up a string description for it. This function can be used to retrieve that description. 
        </member>
        <member name="M:PylonC.NET.GenApi.GetLastErrorDetail">
            <summary>
            Return a detailed textual description of the latest error. 
            </summary>
            <returns>
            The detailed textual description of the latest error 
            </returns>
            
            Whenever a function reports an error, it also sets up a string that describes the error in more detail than the brief error message returned by GenApi.GetLastErrorMessage(). This function can be used to retrieve that description. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetName(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a node's name. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The name of the node 
            </returns>
            
            Query the node represented by hNode for its name. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetToolTip(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a node's tool tip text. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The tool tip text for node 
            </returns>
            
            Query the node represented by hNode for its associated 'tool tip' text. This is a text string briefly describing the node and its purpose, suitable for being displayed as a pop-up by interactive programs that offer access to the node. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetDescription(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a node's description text. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The descrpitive text of the node 
            </returns>
            
            Query the node represented by hNode for its associated 'description' text. This is a text string describing the node and its purpose in some more detail than GenApi.NodeGetToolTip(), suitable for being displayed as an on-line help by interactive programs that offer access to the node. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeGetDisplayName(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a node's user-friendly name. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The user-friendly name of the node 
            </returns>
            
            Query the node represented by hNode for its associated 'user-friendly' name. While the node name returned by GenApi.NodeGetName() is meant to be a unique identification tag, this is a more descriptive name meant to be used to identify a node in a dialog. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeToString(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a textual representation of a node's value. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The textual representation of a node's value 
            </returns>
            
            Convert a node's value to a human-readable text string. 
        </member>
        <member name="M:PylonC.NET.GenApi.FloatGetUnit(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return a floating-point node's unit. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The unit of the floating-point value 
            </returns>
            
            Query the node represented by hNode for the unit that applies to its value. 
        </member>
        <member name="M:PylonC.NET.GenApi.EnumerationEntryGetSymbolic(PylonC.NET.NODE_HANDLE)">
            <summary>
            Return the symbolic name of an enumeration entry node. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <returns>
            The symbolic name of the enumeration entry 
            </returns>
            
            Return the symbolic name of an 'enumeration entry' node. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeToStringEx(PylonC.NET.NODE_HANDLE,System.Boolean)">
            <summary>
            Return a textual representation of a node's value with optional validation. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="verify">
            Boolean switch to enable validation 
            </param>
            <returns>
            The textual representation of a node's value 
            </returns>
            
            Convert a node's value to a human-readable text string, with optional validation. If verify equals true, the node's value is first checked against any relevant constraints, and an error is returned if the value is invalid. This check is not done if verify equals false, in this case, the function behaves identical to GenApi.NodeToString(). 
        </member>
        <member name="M:PylonC.NET.GenApi.FileRead``1(PylonC.NET.GENAPI_FILE_HANDLE,PylonC.NET.PylonBuffer{``0})">
            <summary>
            Reads binary data from a file. 
            </summary>
            <param name="hFile">
            The file handle. 
            </param>
            <param name="buffer">
            The data buffer. 
            </param>
            
            The end of file is reached if zero bytes are returned and the return error code is GENAPI_E_OK. 
        </member>
        <member name="M:PylonC.NET.GenApi.FileWrite``1(PylonC.NET.GENAPI_FILE_HANDLE,PylonC.NET.PylonBuffer{``0},System.UInt32)">
            <summary>
            Writes binary data to a file. 
            </summary>
            <param name="hFile">
            The file handle. 
            </param>
            <param name="buffer">
            The data buffer. 
            </param>
            <param name="length">
            Specifies the number of bytes to write. 
            </param>
            
            Writes binary data to a file. 
        </member>
        <member name="M:PylonC.NET.GenApi.PortRead``1(PylonC.NET.NODE_HANDLE,PylonC.NET.PylonBuffer{``0}@,System.Int64,System.UInt32)">
            <summary>
            Perform a raw read on the port implemented by the node passed. 
            </summary>
            <param name="hNode">
            Node of the port to read from. Use GenApiNodeMapGetNode to get the node handle. 
            </param>
            <param name="buffer">
            Points to the buffer to copy the data to. 
            </param>
            <param name="Address">
            Address to start reading data from. 
            </param>
            <param name="Length">
            Number of bytes to read starting at Address. 
            </param>
            
            Reads raw data from a port implemented by a node. Some nodes (i.e. the "Device" node) can be used to read- and write directly to the device. Specify the address from where to read data. The count of data bytes passed in Length is read. The data read will be written to the buffer passed in pBuffer. Make sure the buffer has at least a size of Length-bytes. 
        </member>
        <member name="M:PylonC.NET.GenApi.PortWrite``1(PylonC.NET.NODE_HANDLE,PylonC.NET.PylonBuffer{``0},System.Int64,System.UInt32)">
            <summary>
            Perform a raw write on the port implemented by the node passed. 
            </summary>
            <param name="hNode">
            Node of the port to write to. Use GenApiNodeMapGetNode to get the node handle. 
            </param>
            <param name="buffer">
            Points to the buffer to read the data. 
            </param>
            <param name="Address">
            Address where to start writing data to. 
            </param>
            <param name="Length">
            Number of bytes to write starting at Address. 
            </param>
            
            Writes raw data to a port implemented by a node. Some nodes (i.e. the "Device" node) can be used to read- and write directly to the device. Specify the address from where to read data. The count of data bytes passed in Length is read. The data written will be read from the buffer passed in pBuffer. Make sure the buffer has at least a size of Length-bytes. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeDeregisterCallback(PylonC.NET.NODE_HANDLE,PylonC.NET.NODE_CALLBACK_HANDLE)">
            <summary>
            Remove a node callback function. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="hCb">
            Callback handle 
            </param>
            
            Remove a callback function previously installed by GenApi.NodeRegisterCallback() from a node. 
        </member>
        <member name="M:PylonC.NET.GenApi.NodeRegisterCallback(PylonC.NET.NODE_HANDLE,PylonC.NET.NodeCallbackHandler)">
            <summary>
            Install a node callback function. 
            </summary>
            <param name="hNode">
            Node to operate on 
            </param>
            <param name="cbFunction">
            Callback handler 
            </param>
            <returns>
            Callback handle 
            </returns>
            
            Install a callback function, to be called whenever any of the node's attributes changes. This also includes the access mode of the node.
        </member>
        <member name="T:PylonC.NET.HandleBase">
            <summary>
            Provides the basic functionality of a handle.
            </summary>
        </member>
        <member name="P:PylonC.NET.HandleBase.IsValid">
            <summary>
            Returns true if the handle is valid.
            </summary>
        </member>
        <member name="M:PylonC.NET.HandleBase.Equals(System.Object)">
            <summary>
            Overloaded. Determines whether two handles are equal.
            </summary>
            <param name="rhs">Determines whether the specified handle is equal to the current handle.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:PylonC.NET.HandleBase.op_Equality(PylonC.NET.HandleBase,PylonC.NET.HandleBase)">
            <summary>
            Determines whether two handles are equal.
            </summary>
            <param name="lhs">Handle A.</param>
            <param name="rhs">Handle B.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:PylonC.NET.HandleBase.op_Inequality(PylonC.NET.HandleBase,PylonC.NET.HandleBase)">
            <summary>
            Determines whether two handles are not equal.
            </summary>
            <param name="lhs">Handle A.</param>
            <param name="rhs">Handle B.</param>
            <returns>True if not equal.</returns>
        </member>
        <member name="M:PylonC.NET.HandleBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="M:PylonC.NET.HandleBase.ToInt">
            <summary>
            Returns a unique integer value for the scope of object.
            </summary>
            <returns>Unique integer value for the scope of object</returns>
        </member>
        <member name="M:PylonC.NET.HandleBase.SetInvalid">
            <summary>
            Sets the handle invalid.
            </summary>
        </member>
        <member name="M:PylonC.NET.HandleBase.FromInt(System.Int64)">
            <summary>
            Reserved, do not use
            </summary>
            <param name="handleAsInt">Reserved, do not use</param>
        </member>
        <member name="T:PylonC.NET.PylonBuffer`1">
            <summary>
            The PylonBuffer support class eases the creation, the life time handling, and the pinning of a
            buffer in memory. The latter is necessary to prevent the garbage collector from moving
            the buffer memory while it is still registered in the pylon layer. The PylonBuffer class
            must not go out of scope while it is still registered.
            </summary>
            <typeparam name="T">Array element type SByte, Byte, Int16, UInt16, Int32, or UInt32</typeparam>
        </member>
        <member name="P:PylonC.NET.PylonBuffer`1.Array">
            <summary>
            Returns associated the array.
            </summary>
        </member>
        <member name="P:PylonC.NET.PylonBuffer`1.Pointer">
            <summary>
            Returns the pointer to the array.
            </summary>
        </member>
        <member name="P:PylonC.NET.PylonBuffer`1.SizeByte">
            <summary>
            Returns the size of the array in bytes.
            </summary>
        </member>
        <member name="M:PylonC.NET.PylonBuffer`1.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Creates a new PylonBuffer of the given size. The size of the buffer can be passed in number of
            array elements or in number of bytes.
            </summary>
            <param name="size">The size in bytes or number of array elements</param>
            <param name="sizeInByte">Indicates what kind of size is passed, e.g. true for a size in bytes</param>
        </member>
        <member name="M:PylonC.NET.PylonBuffer`1.#ctor(`0[])">
            <summary>
            Creates a new PylonBuffer and associates an existing array with it, for registering it in the Pylon layer.
            </summary>
            <param name="array">An existing array.</param>
        </member>
        <member name="M:PylonC.NET.PylonBuffer`1.Finalize">
            <summary>
            Unpins and releases the array.
            </summary>
        </member>
        <member name="M:PylonC.NET.PylonBuffer`1.Dispose">
            <summary>
            Unpins and releases the array.
            </summary>
        </member>
        <member name="T:PylonC.NET.PylonGrabResult_t">
            <summary>
            Result data class for Pylon.StreamGrabberRetrieveResult()
            </summary> 
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.Context">
            <summary>
            Application context
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.hBuffer">
            <summary>
            Data buffer handle
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.Status">
            <summary>
            Result status
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.FrameNr">
            <summary>
            Deprecated: FrameNr has been deprecated. Use BlockID instead.
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.PayloadType">
            <summary>
            Type of data contained in buffer
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.PixelType">
            <summary>
            Pixel type (if the data are pixel data)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.TimeStamp">
            <summary>
            Time stamp
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.SizeX">
            <summary>
            Number of columns (in pixels; only if the data are image data payload)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.SizeY">
            <summary>
            Number of rows (in pixels; only if the data are image data payload)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.OffsetX">
            <summary>
            Starting column (in pixels; only if the data are image data payload)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.OffsetY">
            <summary>
            Starting row (in pixels; only if the data are image data payload)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.PaddingX">
            <summary>
            Number of extra data bytes at end of row (only if the data are image data payload)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.PaddingY">
            <summary>
            Number of extra data bytes at end of image (only if the data are image data payload)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.PayloadSize">
            <summary>
            Total payload size (in bytes)
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.ErrorCode">
            <summary>
            Error code from grab
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonGrabResult_t.BlockID">
            <summary>
            The block ID of the grabbed frame (camera device specific).
            </summary>
            
            \par IEEE 1394 Camera Devices
            The value of block ID is always UINT64_MAX.
            
            \par GigE Camera Devices
            The sequence number starts with 1 and  
            wraps at 65535. The value 0 has a special meaning and indicates 
            that this feature is not supported by the camera.
            
            \par USB Camera Devices
            The sequence number starts with 0 and uses the full 64 Bit range.
            
            \attention A block ID of value UINT64_MAX indicates that the Block ID is invalid and must not be used. 
        </member>
        <member name="T:PylonC.NET.PylonGigEActionCommandResult_t">
            <summary>
            Optional result structure of IGigETransportLayer::IssueActionCommand and IGigETransportLayer::IssueScheduledActionCommand.
            </summary> 
        </member>
        <member name="F:PylonC.NET.PylonGigEActionCommandResult_t.DeviceAddress">
            <summary>
            IP address of the device.
            </summary> 
        </member>
        <member name="F:PylonC.NET.PylonGigEActionCommandResult_t.Status">
            <summary>
            GigE Vision status code returned by the device. See Pylon::EGigEActionCommandStatus for more information.
            </summary> 
        </member>
        <member name="T:PylonC.NET.PylonAviCompressionOptions_t">
            <summary>
            Compression options class for Pylon.AviWriterOpen()
            </summary> 
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.hParentWindow">
            <summary>
            Optional handle to the parent window for the Compression Options dialog box. See the Video for Windows API AviSaveOptions() MSDN documentation.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.showDialog">
            <summary>
            Optionally show the Compression Options dialog box. See the Video for Windows API AviSaveOptions() MSDN documentation.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.userDialogReturnOk">
            <summary>
            Is set to true in the call to the CAviWriter::Open() method if the user pressed OK in the dialog. The compression is not set up if Cancel has been pressed.
            </summary>    
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.autoKeyFrameInsertionRate">
            <summary>
            Causes the insertion of a key frame every nth image when KeyFrameSelection_Auto is used.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.fccType">
            <summary>
            AVICOMPRESSOPTIONS structure: Stream type, for consistency.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.fccHandler">
            <summary>
            AVICOMPRESSOPTIONS structure: Compression.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.dwKeyFrameEvery">
            <summary>
            AVICOMPRESSOPTIONS structure: Key frame rate.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.dwQuality">
            <summary>
            AVICOMPRESSOPTIONS structure: Compression quality 0-10,000.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.dwBytesPerSecond">
            <summary>
            AVICOMPRESSOPTIONS structure: bytes per second.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.dwFlags">
            <summary>
            AVICOMPRESSOPTIONS structure: Flags... see below.
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.formatBuffer">
            <summary>
            Format buffer to wrap the following members of AVICOMPRESSOPTIONS structure: Save format (lpFormat and cbFormat).
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.parmsBuffer">
            <summary>
            Parms buffer to wrap the following members of AVICOMPRESSOPTIONS structure: Compression options (lpParms and cbParms).
            </summary>
        </member>
        <member name="F:PylonC.NET.PylonAviCompressionOptions_t.dwInterleaveEvery">
            <summary>
            AVICOMPRESSOPTIONS structure: For non-video streams only.
            </summary>
        </member>
        <member name="T:PylonC.NET.PylonEventResult_t">
            <summary>
            Result data struct for Pylon.EventGrabberRetrieveEvent()
            </summary> 
        </member>
        <member name="P:PylonC.NET.PylonEventResult_t.Buffer">
            <summary>
            data buffer
            </summary>      
        </member>
        <member name="P:PylonC.NET.PylonEventResult_t.ErrorCode">
            <summary>
            error code
            </summary>          
        </member>
        <member name="T:PylonC.NET.PylonImagePersistenceOptions_t">
            <summary>
            Image persistence options class.
            </summary> 
        </member>
        <member name="M:PylonC.NET.PylonImagePersistenceOptions_t.#ctor">
            <summary>
            Constructor. Compression quality is set to 90.
            </summary>			
        </member>
        <member name="P:PylonC.NET.PylonImagePersistenceOptions_t.Quality">
            <summary>
            Sets or gets the quality when saving JPEG images. Valid quality values range from 0 to 100.
            </summary>      
        </member>
        <member name="T:PylonC.NET.PYLON_CHUNKPARSER_HANDLE">
            <summary>
            A handle for a chunk parser object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_DEVICECALLBACK_HANDLE">
            <summary>
            A handle for a device callback object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_DEVICE_HANDLE">
            <summary>
            A handle for a device object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_DEVICE_INFO_HANDLE">
            <summary>
            A handle for a device info object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_EVENTADAPTER_HANDLE">
            <summary>
            A handle for an event adapter object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_EVENTGRABBER_HANDLE">
            <summary>
            A handle for an event grabber object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_FORMAT_CONVERTER_HANDLE">
            <summary>
            A handle for a pixel format converter object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE">
            <summary>
            A handle for an image format converter object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_AVI_WRITER_HANDLE">
            <summary>
            A handle for an AVI writer object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_STREAMBUFFER_HANDLE">
            <summary>
            A handle for a stream buffer object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_STREAMGRABBER_HANDLE">
            <summary>
            A handle for a stream grabber object
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_WAITOBJECTS_HANDLE">
            <summary>
            A handle for a node object set
            </summary>
        </member>
        <member name="T:PylonC.NET.PYLON_WAITOBJECT_HANDLE">
            <summary>
            A handle for a wait object
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonWaitExResult">
            <summary>
            The reason why a wait operation terminated. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonWaitExResult.waitex_timeout">
            <summary>
            The time-out interval elapsed. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonWaitExResult.waitex_signaled">
            <summary>
            The wait operation completed successfully. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonWaitExResult.waitex_abandoned">
            <summary>
            Windows only (see MSDN for more information) 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonWaitExResult.waitex_alerted">
            <summary>
            The wait was interrupted (Windows: queued APC or I/O completion routine; UNIX: signal) 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonGrabStatus">
            <summary>
            The grab status. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGrabStatus.UndefinedGrabStatus">
            <summary>
            status not defined 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGrabStatus.Idle">
            <summary>
            currently not used 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGrabStatus.Queued">
            <summary>
            in the input queue 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGrabStatus.Grabbed">
            <summary>
            filled with data 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGrabStatus.Canceled">
            <summary>
            request was canceled 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGrabStatus.Failed">
            <summary>
            request failed 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonPayloadType">
            <summary>
            PayloadType for PylonGrabResult_t. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPayloadType.PayloadType_Undefined">
            <summary>
            The buffer content is undefined. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPayloadType.PayloadType_Image">
            <summary>
            The buffer contains image data. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPayloadType.PayloadType_RawData">
            <summary>
            The buffer contains raw data. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPayloadType.PayloadType_File">
            <summary>
            The buffer contains file data. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPayloadType.PayloadType_ChunkData">
            <summary>
            The buffer contains chunk data. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPayloadType.PayloadType_DeviceSpecific">
            <summary>
            The buffer contains device specific data. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonPixelType">
            <summary>
            List all possible pixel formats. See the camera User's Manual for a detailed description of the available pixel formats. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Undefined">
            <summary>
            Indicates that the pixel format is undefined or not valid. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono8">
            <summary>
            Indicates the Mono 8 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono8signed">
            <summary>
            Indicates the Mono 8 Signed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono10">
            <summary>
            Indicates the Mono 10 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono10packed">
            <summary>
            Indicates the Mono 10 Packed pixel format. The memory layout of PixelType_Mono10packed and PixelType_Mono10p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono10p">
            <summary>
            Indicates the Mono10p pixel format. The memory layout of PixelType_Mono10packed and PixelType_Mono10p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono12">
            <summary>
            Indicates the Mono 12 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono12packed">
            <summary>
            Indicates the Mono 12 Packed pixel format. The memory layout of PixelType_Mono12packed and PixelType_Mono12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono12p">
            <summary>
            Indicates the Mono12p pixel format. The memory layout of PixelType_Mono12packed and PixelType_Mono12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Mono16">
            <summary>
            Indicates the Mono 16 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGR8">
            <summary>
            Indicates the Bayer GR 8 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerRG8">
            <summary>
            Indicates the Bayer RG 8 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGB8">
            <summary>
            Indicates the Bayer GB 8 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerBG8">
            <summary>
            Indicates the Bayer BG 8 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGR10">
            <summary>
            Indicates the Bayer GR 10 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerRG10">
            <summary>
            Indicates the Bayer RG 10 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGB10">
            <summary>
            Indicates the Bayer GB 10 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerBG10">
            <summary>
            Indicates the Bayer BG 10 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGR12">
            <summary>
            Indicates the Bayer GR 12 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerRG12">
            <summary>
            Indicates the Bayer RG 12 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGB12">
            <summary>
            Indicates the Bayer GB 12 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerBG12">
            <summary>
            Indicates the Bayer BG 12 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB8packed">
            <summary>
            Indicates the RGB 8 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BGR8packed">
            <summary>
            Indicates the BGR 8 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGBA8packed">
            <summary>
            Indicates the RGBA 8 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BGRA8packed">
            <summary>
            Indicates the BGRA 8 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB10packed">
            <summary>
            Indicates the RGB 10 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BGR10packed">
            <summary>
            Indicates the BGR 10 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB12packed">
            <summary>
            Indicates the RGB 12 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BGR12packed">
            <summary>
            Indicates the BGR 12 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB16packed">
            <summary>
            Indicates the RGB 16 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BGR10V1packed">
            <summary>
            Indicates the BGR 10 V1 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BGR10V2packed">
            <summary>
            Indicates the BGR 10 V2 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_YUV411packed">
            <summary>
            Indicates the YUV 411 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_YUV422packed">
            <summary>
            Indicates the YUV 422 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_YUV444packed">
            <summary>
            Indicates the YUV 444 Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB8planar">
            <summary>
            Indicates the RGB 8 Planar pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB10planar">
            <summary>
            Indicates the RGB 10 Planar pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB12planar">
            <summary>
            Indicates the RGB 12 Planar pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB16planar">
            <summary>
            Indicates the RGB 16 Planar pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_YUV422_YUYV_Packed">
            <summary>
            Indicates the YUV 422 (YUYV) Packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGR12Packed">
            <summary>
            Indicates the Bayer GR 12 Packed pixel format. The memory layout of PixelType_BayerGR12Packed and PixelType_BayerGR12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerRG12Packed">
            <summary>
            Indicates the Bayer RG 12 Packed pixel format. The memory layout of PixelType_BayerRG12Packed and PixelType_BayerRG12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGB12Packed">
            <summary>
            Indicates the Bayer GB 12 Packed pixel format. The memory layout of PixelType_BayerGB12Packed and PixelType_BayerGB12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerBG12Packed">
            <summary>
            Indicates the Bayer BG 12 Packed pixel format. The memory layout of PixelType_BayerBG12Packed and PixelType_BayerBG12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGR10p">
            <summary>
            Indicates the BayerGR10p pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerRG10p">
            <summary>
            Indicates the BayerRG10p pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGB10p">
            <summary>
            Indicates the BayerGB10p pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerBG10p">
            <summary>
            Indicates the BayerBG10p pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGR12p">
            <summary>
            Indicates the BayerGR12p pixel format. The memory layout of PixelType_BayerGR12Packed and PixelType_BayerGR12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerRG12p">
            <summary>
            Indicates the BayerRG12p pixel format. The memory layout of PixelType_BayerRG12Packed and PixelType_BayerRG12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGB12p">
            <summary>
            Indicates the BayerGB12p pixel format. The memory layout of PixelType_BayerGB12Packed and PixelType_BayerGB12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerBG12p">
            <summary>
            Indicates the BayerBG12p pixel format. The memory layout of PixelType_BayerBG12Packed and PixelType_BayerBG12p is different. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGR16">
            <summary>
            Indicates the Bayer GR 16 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerRG16">
            <summary>
            Indicates the Bayer RG 16 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerGB16">
            <summary>
            Indicates the Bayer GB 16 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_BayerBG16">
            <summary>
            Indicates the Bayer BG 16 pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_RGB12V1packed">
            <summary>
            Indicates the RGB 12 V1 packed pixel format. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonPixelType.PixelType_Double">
            <summary>
            Indicates the Double pixel format. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonImageFileFormat">
            <summary>
            Lists the available file formats. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonImageFileFormat.ImageFileFormat_Bmp">
            <summary>
            Windows Bitmap, no compression. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonImageFileFormat.ImageFileFormat_Tiff">
            <summary>
            Tagged Image File Format, no compression, supports mono images with more than 8 bit bit depth. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonImageFileFormat.ImageFileFormat_Jpeg">
            <summary>
            Joint Photographic Experts Group, lossy data compression. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonImageFileFormat.ImageFileFormat_Png">
            <summary>
            Portable Network Graphics, lossless data compression. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonImageFileFormat.ImageFileFormat_Raw">
            <summary>
            Saves the raw image buffer data. Packed image formats are unpacked. In the format used for saving, the data cannot be loaded using Pylon. ImagePersistenceLoad. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonImageOrientation">
            <summary>
            Defines the vertical orientation of an image in memory. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonImageOrientation.ImageOrientation_TopDown">
            <summary>
            The first row of the image is located at the start of the image buffer. This is the default for images taken by a camera. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonImageOrientation.ImageOrientation_BottomUp">
            <summary>
            The last row of the image is located at the start of the image buffer. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonKeyFrameSelection">
            <summary>
            Lists the possibilities for selecting a key frame when using compression. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonKeyFrameSelection.KeyFrameSelection_NoKeyFrame">
            <summary>
            Indicates that an image is not a key frame. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonKeyFrameSelection.KeyFrameSelection_KeyFrame">
            <summary>
            Indicates that an image is a key frame. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonKeyFrameSelection.KeyFrameSelection_Auto">
            <summary>
            Every nth frame is a key frame. The value of n is specified by passing its value in the SAviCompressionOptions in the autoKeyFrameInsertionRate member when opening the AVI Writer. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonShowWindow">
            <summary>
            Lists the possibilities for selecting a show window command. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_HIDE">
            <summary>
            Same as SW_HIDE in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOWNORMAL">
            <summary>
            Same as SW_SHOWNORMAL and SW_NORMAL in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOWMINIMIZED">
            <summary>
            Same as SW_SHOWMINIMIZED in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOWMAXIMIZED">
            <summary>
            Same as SW_SHOWMAXIMIZED and SW_MAXIMIZE in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOWNOACTIVATE">
            <summary>
            Same as SW_SHOWNOACTIVATE in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOW">
            <summary>
            Same as SW_SHOWNOACTIVATE in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_MINIMIZE">
            <summary>
            Same as SW_MINIMIZE in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOWMINNOACTIVE">
            <summary>
            Same as SW_SHOWMINNOACTIVE in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOWNA">
            <summary>
            Same as SW_SHOWNA in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_RESTORE">
            <summary>
            Same as SW_RESTORE in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_SHOWDEFAULT">
            <summary>
            Same as SW_SHOWDEFAULT in WinUser.h. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonShowWindow.EPylonShowWindow_SW_FORCEMINIMIZE">
            <summary>
            Same as SW_FORCEMINIMIZE in WinUser.h. 
            </summary>
        </member>
        <member name="T:PylonC.NET.EPylonGigEActionCommandStatus">
            <summary>
            Lists possible status codes returned by Pylon.GigEIssueActionCommand() or Pylon.GigEIssueScheduledActionCommand(). 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGigEActionCommandStatus.PylonGigEActionCommandStatus_Ok">
            <summary>
            The device acknowledged the command. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGigEActionCommandStatus.PylonGigEActionCommandStatus_NoRefTime">
            <summary>
            The device is not synchronized to a master clock to be used as time reference. Typically used when scheduled action commands cannot be scheduled for a future time since the reference time coming from IEEE 1588 is not locked. The action command has been ignored by the device. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGigEActionCommandStatus.PylonGigEActionCommandStatus_Overflow">
            <summary>
            Returned when the scheduled action commands queue is full and the device cannot accept the additional request. The action command has been discarded by the device. 
            </summary>
        </member>
        <member name="F:PylonC.NET.EPylonGigEActionCommandStatus.PylonGigEActionCommandStatus_ActionLate">
            <summary>
            The requested scheduled action command was requested at a point in time that is in the past. If the time tag of the scheduled action command is in the past (relative to the device timestamp), and if it is a valid action command, then the device will execute this action command immediately and return PylonGigEActionCommandStatus_ActionLate. This status code is used as an indicator to the application requesting the action command that a mis-synchronization might have occurred. 
            </summary>
        </member>
        <member name="T:PylonC.NET.Pylon">
            <summary>
            %Pylon Interface
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoFullNameKey">
            <summary>
            The full name identifying the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoFriendlyNameKey">
            <summary>
            The human readable name of the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoVendorNameKey">
            <summary>
            The vendor name of the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoDeviceClassKey">
            <summary>
            The device class device, e.g. Basler1394.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoSerialNumberKey">
            <summary>
            The serial number if it supported by the underlying implementation.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoUserDefinedNameKey">
            <summary>
            The user-defined name if present.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoModelNameKey">
            <summary>
            The model name of the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoDeviceFactoryKey">
            <summary>
            The identifier for the transport layer able to create this device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoDeviceVersionKey">
            <summary>
            The version string of the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoAddressKey">
            <summary>
            GigE Device: The IP-address the device IP address in a human-readable representation including the port number.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoIpAddressKey">
            <summary>
            GigE Device: The IP-address the device IP address in a human-readable representation.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoDefaultGatewayKey">
            <summary>
            GigE Device: The default gateway the device IP address in a human-readable representation.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoSubnetMaskKey">
            <summary>
            GigE Device: The subnet mask the device IP address in a human-readable representation.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoPortNrKey">
            <summary>
            GigE Device: The port number used.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoMacAddressKey">
            <summary>
            GigE Device: The MAC address of the device the device IP address in a human-readable representation.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoInterfaceKey">
            <summary>
            GigE Device: The address of the network interface the device is connected.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoIpConfigOptionsKey">
            <summary>
            GigE Device: The persistent IP configuration options.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoIpConfigCurrentKey">
            <summary>
            GigE Device: The current IP configuration of the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoSubnetAddressKey">
            <summary>
            GigE Device: The subnet address of the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoPortIDKey">
            <summary>
            Camera Link Device: The ID of the serial port the device is connected to.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoDeviceIDKey">
            <summary>
            Camera Link Device: The device ID.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoInitialBaudRateKey">
            <summary>
            Camera Link Device: The initial baud rate of the serial port the device is connected to.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoDeviceGUIDKey">
            <summary>
            USB Device: The device GUID.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonDeviceInfoManufacturerInfoKey">
            <summary>
            USB Device: The manufacturer info.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonAccessModeMonitor">
            <summary>
            Only those operations are allowed that do not affect the state of the device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonAccessModeControl">
            <summary>
            Write access to device features is allowed.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonAccessModeStream">
            <summary>
            Stream grabber access is allowed.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonAccessModeEvent">
            <summary>
            Event grabber access is allowed.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonAccessModeExclusive">
            <summary>
            Get exclusive access to device.
            </summary>
        </member>
        <member name="F:PylonC.NET.Pylon.cPylonImageWindowUseDefault">
            <summary>
            Value to create the window at the same position as the previous one before it was closed.
            </summary>
        </member>
        <member name="M:PylonC.NET.Pylon.EnumerateDevices">
            <summary>
            Enumerate all camera devices. 
            </summary>
            <returns>
            Count of camera devices found 
            </returns>
            
            This function returns the total count of all camera devices detected by the pylon.NET system regardless of the cameras' interfaces (GigE, IEEE 1394, Camera Link,...) and creates an internal list of device information objects ordered by device type (USB first, then GigE, CameraLink, 1394) and serial number. The device information objects are accessible by the index with Pylon.GetDeviceInfo() function.  The internal list of device information objects changes for all threads. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigEEnumerateAllDevices">
            <summary>
            Enumerate all GigE camera devices in all subnets. 
            </summary>
            <returns>
            Count of GigE camera devices 
            </returns>
            
            This function returns the total count of all GigE camera devices detected by the pylon.NET system and creates an internal list of device information objects ordered by serial number. The devices are accessible by the index with Pylon.GetDeviceInfo() function. In contrast to the Pylon.EnumerateDevices() function, devices will be listed that have a subnet configured that is different from the subnet of the host system network adapters.  The internal list of device information objects changes for all threads. This function uses the same internal list of device information objects as the Pylon.EnumerateDevices() function. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigEForceIp(System.String,System.String,System.String,System.String)">
            <summary>
            'Force' a static IP address configuration into a device identified by its MAC Address. 
            </summary>
            <param name="macAddress">
            MAC address as a string, no delimiters are used. e.g., 003053061a58 
            </param>
            <param name="ipAddress">
            Temporary IP address, "dot notation", e.g., 192.168.1.2 
            </param>
            <param name="subnetMask">
            Temporary SubnetMask, "dot notation", eg. 255.255.255.0 
            </param>
            <param name="defaultGateway">
            Temporary DefaultGateway, "dot notation", e.g., 192.168.1.1 
            </param>
            
            When calling this function, there must be no opened camera object for the device to reconfigure! Pylon.DeviceInfoGetPropertyValueByName() can be used to retrieve the MAC Address using the 'MacAddress' key. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigERestartIpConfiguration(System.String)">
            <summary>
            Let a device restart the IP configuration cycle. 
            </summary>
            <param name="macAddress">
            MAC address as a string, no delimiters are used. e.g., 003053061a58 
            </param>
            
            This function fails when the device is open, i.e., when a control channel is established. Pylon.DeviceInfoGetPropertyValueByName() can be used to retrieve the MAC Address using the 'MacAddress' key. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigEChangeIpConfiguration(PylonC.NET.PYLON_DEVICE_HANDLE,System.Boolean,System.Boolean)">
            <summary>
            Enables/disables use of a persistent IP address and DHCP usage. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="EnablePersistentIp">
            Enable use of persistent IP address 
            </param>
            <param name="EnableDhcp">
            Enable use of DHCP 
            </param>
            
            Enables/disables use of a persistent IP address and DHCP usage. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigESetPersistentIpAddress(PylonC.NET.PYLON_DEVICE_HANDLE,System.String,System.String,System.String)">
            <summary>
            Writes a persistent IP address to the device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="ipAddress">
            IP address, "dot notation", e.g., 192.168.1.2 
            </param>
            <param name="subnetMask">
            SubnetMask, "dot notation", eg. 255.255.255.0 
            </param>
            <param name="defaultGateway">
            DefaultGateway, "dot notation", e.g., 192.168.1.1 
            </param>
            
            Writing the persistent IP address does not change the IP configuration. Use the ChangeIpConfiguration() method to enable the usage of persistent IP addresses. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigEAnnounceRemoteDevice(System.String)">
            <summary>
            Announce that a remote device is going to be used. 
            </summary>
            <param name="ipAddress">
            Address of device in "dot notation" 
            </param>
            This device must be reachable, a route is configured. 
            Announce that a remote device is going to be used. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigERenounceRemoteDevice(System.String)">
            <summary>
            Stop using remote device. 
            </summary>
            <param name="ipAddress">
            Address of device in "dot notation" 
            </param>
            <returns>
            True if device was found. 
            </returns>
            
            Stop using remote device. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigEBroadcastIpConfiguration(System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean@)">
            <summary>
            Broadcasts the IP configuration. 
            </summary>
            <param name="macAddress">
            specifies the target device 
            </param>
            <param name="EnablePersistentIp">
            enable persistent (static) IP configuration 
            </param>
            <param name="EnableDHCP">
            enable DHCP configuration 
            </param>
            <param name="ipAddress">
            IP address, "dot notation", e.g., 192.168.1.2 
            </param>
            <param name="subnetMask">
            SubnetMask, "dot notation", eg. 255.255.255.0 
            </param>
            <param name="defaultGateway">
            DefaultGateway, "dot notation", e.g., 192.168.1.1 
            </param>
            <param name="userdefinedName">
            string with name for the device 
            </param>
            <param name="retval">
            whether the configuration was applied successfully 
            </param>
            
            Broadcasts the IP configuration for the device with the specified MAC address. 
        </member>
        <member name="M:PylonC.NET.Pylon.GetDeviceInfoHandle(System.UInt32)">
            <summary>
            Return a handle for a camera device info object. 
            </summary>
            <param name="index">
            Device index 
            </param>
            <returns>
            Handle of a device info object 
            </returns>
            
            This function returns a handle for a device info object for the device identified by index index. The index parameter must be lower than the numDevices parameter returned from Pylon.EnumerateDevices(). 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceInfoGetNumProperties(PylonC.NET.PYLON_DEVICE_INFO_HANDLE)">
            <summary>
            Return the number of properties stored in a device info object. 
            </summary>
            <param name="hDi">
            Device info handle 
            </param>
            <returns>
            The number of properties 
            </returns>
            
            This function returns the total number of properties of the device info object represented by hDi has. 
        </member>
        <member name="M:PylonC.NET.Pylon.CreateDeviceByIndex(System.UInt32)">
            <summary>
            Create a device object. 
            </summary>
            <param name="index">
            Index of device info object 
            </param>
            <returns>
            Handle of the device identified by the index 
            </returns>
            
            This function creates a device object from a device info object identified by its index index. 
        </member>
        <member name="M:PylonC.NET.Pylon.CreateDeviceFromDirectShowID(System.Int32)">
            <summary>
            Creates a device from a device ID returned from the pylon DirectShow source filter. 
            </summary>
            <param name="id">
            The device returned from IBaslerGenICamConfig interface 
            </param>
            <returns>
            Handle of the device identified by the index 
            </returns>
            
            This function creates a device object from an ID returned by the IBaslerGenICamConfig::GetActiveDevice() function. 
        </member>
        <member name="M:PylonC.NET.Pylon.IsDeviceAccessible(System.UInt32,System.Int32)">
            <summary>
            This method can be used to check if a camera device can be created and opened. 
            </summary>
            <param name="index">
            Device index, see also Pylon.EnumerateDevices() for more information. 
            </param>
            <param name="accessMode">
            Used for defining how a device is accessed. The use of the mode information is transport layer specific. For IIDC 1394 devices the mode information is ignored. For GigE devices the flags Exclusive and Control are used for defining how a device is accessed. 
            </param>
            <returns>
            True if device can be opened with provided access mode. 
            </returns>
            
            This method can be used to check if a camera device can be created and opened. The internal list of device information objects does not change. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceOpen(PylonC.NET.PYLON_DEVICE_HANDLE,System.Int32)">
            <summary>
            Open a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="accessMode">
            Intended access mode. You can pass one or more of the flags specified below. 
            </param>
            
            This function opens a device. A device must be opened before any operations can be performed on it. The accessMode argument can be used to restrict the type of access allowed by the device. The following access modes are available: PYLONC_ACCESS_MODE_CONTROL - Allows to read or write camera parameters to configure the camera. PYLONC_ACCESS_MODE_STREAM - Allows to read image data from the camera's stream grabber object. PYLONC_ACCESS_MODE_EVENT - Allows to read event data from the camera's stream grabber object. PYLONC_ACCESS_MODE_EXCLUSIVE - Allows exclusive access. When this flag is specified no other application may access the camera. PYLONC_ACCESS_MODE_MONITOR - Allows only read access. This flag cannot be combined with any other flags. It is typically used in Multicast/Broadcast applications with GigE cameras.
            You can pass one or more flags. If you pass more than one flag you can combine them using the 'or' operator. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceClose(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Close a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            
            This function closes a device. After closing, the device can no longer be accessed. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceIsOpen(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Return device open status. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            True if open 
            </returns>
            
            Call this function to find out whether a device is currently open. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceAccessMode(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Return access mode flags for a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Result Current access mode of device 
            </returns>
            
            Given a device handle, this function returns the access mode specified when the device was created. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetDeviceInfoHandle(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Return the handle to the device info object from which a device was created. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Handle of device info 
            </returns>
            
            Given a device handle, this function returns a handle for the device object from which the device has originally been created. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetNumStreamGrabberChannels(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Return the number of stream grabber channels for a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Number of stream grabber channels 
            </returns>
            
            This function returns the number of stream grabber channels supported by the device. Some devices may return 0 as they do not support stream grabbers at all. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetStreamGrabber(PylonC.NET.PYLON_DEVICE_HANDLE,System.UInt32)">
            <summary>
            Obtain a stream grabber handle from a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="index">
            Stream grabber index. This value must be in the range of 0..(Pylon.DeviceGetNumStreamGrabberChannels()-1) 
            </param>
            <returns>
            Handle of stream grabber identified by the index 
            </returns>
            
            This function returns a handle for one of the stream grabbers supported by the device. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetEventGrabber(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Obtain an event grabber handle from a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Result Handle of the event grabber 
            </returns>
            
            This function returns a handle for an event grabber of a device. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetNodeMap(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Return the parameter node map for a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Handle of the node map 
            </returns>
            
            This function returns a handle for the node map of a device. If the device does not support a node map an invalid handle is returned. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetTLNodeMap(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Obtain a transport layer parameter node map from a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Handle of the transport layer node map 
            </returns>
            
            This function returns a handle for the transport layer node map of a device. If the device does not support a transport layer node map an invalid handle is returned. You must use the GenApi functions to access nodes in the node map. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceCreateChunkParser(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Create a chunk parser for a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Handle of the created chunk parser 
            </returns>
            
            This function creates a chunk parser for a device and returns a handle for it. If the device does not support a chunk parser an invalid handle is returned. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceDestroyChunkParser(PylonC.NET.PYLON_DEVICE_HANDLE,PylonC.NET.PYLON_CHUNKPARSER_HANDLE)">
            <summary>
            Destroy a chunk parser. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="hChp">
            Chunk parser handle 
            </param>
            
            This function destroys a chunk parser handle previously obtained from the device by calling Pylon.DeviceCreateChunkParser(). 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceCreateEventAdapter(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Create an event adapter for a device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <returns>
            Handle of the created event adapter 
            </returns>
            
            This function creates an event adapter for a device and returns a handle for it. If the device does not support an event adapter an invalid handle is returned. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceDestroyEventAdapter(PylonC.NET.PYLON_DEVICE_HANDLE,PylonC.NET.PYLON_EVENTADAPTER_HANDLE)">
            <summary>
            Destroy an event adapter. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="hEva">
            Event adapter handle 
            </param>
            
            This function destroys an event adapter handle previously obtained from the device by calling Pylon.DeviceCreateEventAdapter(). 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceSetIntegerFeature(PylonC.NET.PYLON_DEVICE_HANDLE,System.String,System.Int64)">
            <summary>
            Set an integer feature's value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <param name="value">
            Value to set. Make sure the value is valid for the node (see remarks) 
            </param>
            
            Look up a feature node with a given name and and set its value from argument value. The value must obey certain rules which may vary from node to node. The value must be in the range Pylon.DeviceGetIntegerFeatureMin()..Pylon.DeviceGetIntegerFeatureMax(). The value must also be Pylon.DeviceGetIntegerFeatureMin() + N * Pylon.DeviceGetIntegerFeatureInc() with N = 0,1,2,3,...,n 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetIntegerFeature(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return an integer feature's value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature integer value 
            </returns>
            
            Look up a feature node with a given name and and return its value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetIntegerFeatureMin(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return an integer feature's minimum value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature integer value minimum 
            </returns>
            
            Look up a feature node with a given name and and return its minimum value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetIntegerFeatureMax(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return an integer feature's maximum value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature integer value maximum 
            </returns>
            
            Look up a feature node with a given name and and return its maximum value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetIntegerFeatureInc(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return an integer feature's increment value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature integer value minimum increment 
            </returns>
            
            Look up a feature node with a given name and and return its increment value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceSetFloatFeature(PylonC.NET.PYLON_DEVICE_HANDLE,System.String,System.Double)">
            <summary>
            Set a float feature's value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <param name="value">
            Value to set. Make sure the value is in the range of Pylon.DeviceGetFloatFeatureMin().. Pylon.DeviceGetFloatFeatureMax() 
            </param>
            
            Look up a feature node with a given name and and set its value from argument value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetFloatFeature(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return a float feature's value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature float value 
            </returns>
            
            Look up a feature node with a given name and and return its value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetFloatFeatureMin(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return a float feature's minimum value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature float value minimum 
            </returns>
            
            Look up a feature node with a given name and and return its minimum value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetFloatFeatureMax(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return a float feature's maximum value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature float value maximum 
            </returns>
            
            Look up a feature node with a given name and and return its maximum value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceSetBooleanFeature(PylonC.NET.PYLON_DEVICE_HANDLE,System.String,System.Boolean)">
            <summary>
            Set a boolean feature's value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <param name="value">
            Value to set 
            </param>
            
            Look up a feature node with a given name and and set its boolean value from argument value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGetBooleanFeature(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return a boolean feature's value. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            Feature boolean value 
            </returns>
            
            Look up a feature node with a given name and and return its boolean value. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceExecuteCommandFeature(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Execute a command. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            
            Look up a command feature node with a given name and try to execute its command. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceIsCommandDone(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return true if command execution has finished. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            True if done 
            </returns>
            
            Look up a command feature node with a given name and return true if the node is not currently busy executing its command, false otherwise. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceFeatureFromString(PylonC.NET.PYLON_DEVICE_HANDLE,System.String,System.String)">
            <summary>
            Set a feature's value from a string. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <param name="value">
            Value to set as string 
            </param>
            
            Look up a feature node with a given name and and set its value from the argument string. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceFeatureGetAccessMode(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return a feature's access permissions. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            The access mode 
            </returns>
            
            Look up a feature node with a given name and and return its access mode. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberOpen(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Open a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            
            This function opens a stream grabber for use. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberClose(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Close a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            
            This function closes a stream grabber after use. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberIsOpen(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Return the boolean 'open' status of a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <returns>
            True if open 
            </returns>
            
            This function checks whether a stream grabber is currently open. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberGetWaitObject(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Return a stream grabber's wait object. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <returns>
            Handle of stream grabber wait object 
            </returns>
            
            This function returns a wait object handle of the stream grabber. You can use this handle to wait for a buffer using Pylon.WaitObjectWait() or pass it to wait object set using Pylon.WaitObjectsAdd(). 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberSetMaxNumBuffer(PylonC.NET.PYLON_STREAMGRABBER_HANDLE,System.UInt32)">
            <summary>
            Set the maximum number of data buffers for a stream grabber to use. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <param name="numBuffers">
            Buffer count to set 
            </param>
            
            This function is used to prepare a stream grabber for grabbing. It sets up the maximum number of buffers that will be used to grab data. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberGetMaxNumBuffer(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Return the maximum number of data buffers a stream grabber is set to use. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <returns>
            Buffer count to set 
            </returns>
            
            This function returns the number of data buffers the stream grabber is currently prepared to accept. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberSetMaxBufferSize(PylonC.NET.PYLON_STREAMGRABBER_HANDLE,System.UInt32)">
            <summary>
            Set the maximum data buffer size for a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <param name="maxSize">
            Buffer size to set 
            </param>
            
            This function is used to prepare a stream grabber for grabbing. It sets up the maximum size of any individual data buffer that will be used to grab data. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberGetMaxBufferSize(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Return the maximum data buffer size for a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <returns>
            Maximum buffer size 
            </returns>
            
            This function returns the maximum data buffer size that a stream grabber is currently set to. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberDeregisterBuffer(PylonC.NET.PYLON_STREAMGRABBER_HANDLE,PylonC.NET.PYLON_STREAMBUFFER_HANDLE)">
            <summary>
            Detach an image data buffer from a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <param name="hBuf">
            Buffer handle 
            </param>
            
            Tell the stream grabber that the data buffer represented by hBuf will no longer be used for grabbing. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberPrepareGrab(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Prepare a stream grabber for grabbing. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            
            Tell the stream grabber that no more setup operations (data buffer registration etc.) will be done, and that it should get ready for grabbing by allocating all required resources. After calling this function, further setup operations will be rejected. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberFinishGrab(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Shut down a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            
            Tell the stream grabber that grabbing has finished and that it should release all resources allocated by Pylon.StreamGrabberPrepareGrab(). After this, the stream grabber setup may be modified again. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberCancelGrab(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Cancel grab operation. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            
            Tell the stream grabber to stop grabbing immediately. Buffers already queued but not yet processed will be returned with a 'cancelled' status. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberGetNodeMap(PylonC.NET.PYLON_STREAMGRABBER_HANDLE)">
            <summary>
            Return the node map for a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <returns>
            Handle of the stream grabber's node map 
            </returns>
            
            Return the handle for the stream grabber's node map. If the stream grabber does not support a node map an invalid handle is returned. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectIsValid(PylonC.NET.PYLON_WAITOBJECT_HANDLE)">
            <summary>
            Return the boolean 'valid' status of a stream grabber. 
            </summary>
            <param name="hWobj">
            Wait object handle 
            </param>
            <returns>
            True if wait object is fully initialized and ready to be used 
            </returns>
            
            Check, whether a wait object is fully initialized and ready to be used. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectWait(PylonC.NET.PYLON_WAITOBJECT_HANDLE,System.UInt32)">
            <summary>
            Wait on a wait object. 
            </summary>
            <param name="hWobj">
            Wait object handle 
            </param>
            <param name="timeout">
            Max. time to wait in ms 
            </param>
            <returns>
            True if signaled else timeout 
            </returns>
            
            Wait until either the wait object becomes signaled or the timeout expires. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectWaitEx(PylonC.NET.PYLON_WAITOBJECT_HANDLE,System.UInt32,System.Boolean)">
            <summary>
            Extended wait on a wait object. 
            </summary>
            <param name="hWobj">
            Wait object handle 
            </param>
            <param name="timeout">
            Max. time to wait in ms 
            </param>
            <param name="alertable">
            Boolean flag selecting alertable or non-alertable wait 
            </param>
            <returns>
            Wait result 
            </returns>
            
            Wait, until either the wait object becomes signaled or the timeout expires. The boolean return value indicates which on is the case: True - signaled, false - timeout. The alertable argument, if set to one, allows the wait to be interrupted. This is an extended version of Pylon.WaitObjectWait(). 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectCreate">
            <summary>
            Create a user-controllable wait object. 
            </summary>
            <returns>
            Created wait object handle 
            </returns>
            
            This function returns a handle for a newly-created empty wait object. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectDestroy(PylonC.NET.PYLON_WAITOBJECT_HANDLE)">
            <summary>
            Get rid of a user-controllable wait object. 
            </summary>
            <param name="hWobj">
            Wait object handle 
            </param>
            
            This function deletes a wait object. Only wait objects created via Pylon.WaitObjectCreate() can be deleted by this function. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectSignal(PylonC.NET.PYLON_WAITOBJECT_HANDLE)">
            <summary>
            Set a wait object to the 'signaled' state. 
            </summary>
            <param name="hWobj">
            Wait object handle 
            </param>
            
            This function sets a wait object to the 'signaled' state. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectReset(PylonC.NET.PYLON_WAITOBJECT_HANDLE)">
            <summary>
            Reset a wait object to the 'not signaled' state. 
            </summary>
            <param name="hWobj">
            Wait object handle 
            </param>
            
            This function sets a wait object to the 'not signaled' state. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsCreate">
            <summary>
            Create a wait object set. 
            </summary>
            <returns>
            Created wait object set handle 
            </returns>
            
            This function returns a handle for a newly-created empty wait object set. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsDestroy(PylonC.NET.PYLON_WAITOBJECTS_HANDLE)">
            <summary>
            Destroy a wait object set. 
            </summary>
            <param name="hWos">
            Wait object set handle to delete 
            </param>
            
            This function deletes a wait object set. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsAdd(PylonC.NET.PYLON_WAITOBJECTS_HANDLE,PylonC.NET.PYLON_WAITOBJECT_HANDLE)">
            <summary>
            Add a single wait object to a wait object set. 
            </summary>
            <param name="hWos">
            Wait object set 
            </param>
            <param name="hWobj">
            Wait object to add 
            </param>
            <returns>
            Index of the wait object added 
            </returns>
            
            Attach a single wait object to a wait object set. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsRemoveAll(PylonC.NET.PYLON_WAITOBJECTS_HANDLE)">
            <summary>
            Remove all wait objects from a wait object set. 
            </summary>
            <param name="hWos">
            Wait object set 
            </param>
            
            All wait objects that are currently attached to a wait object set are detached from it. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsWaitForAll(PylonC.NET.PYLON_WAITOBJECTS_HANDLE,System.UInt32)">
            <summary>
            Wait for all objects in a wait object set to become signaled. 
            </summary>
            <param name="hWos">
            Wait object set handle 
            </param>
            <param name="timeout">
            Max. time to wait in ms 
            </param>
            <returns>
            True if signaled else timeout 
            </returns>
            
            Wait until either all wait objects in the set become signaled or the timeout expires. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsWaitForAny(PylonC.NET.PYLON_WAITOBJECTS_HANDLE,System.UInt32,System.UInt32@)">
            <summary>
            Wait for any one object in a wait object set to become signaled. 
            </summary>
            <param name="hWos">
            Wait object set handle 
            </param>
            <param name="timeout">
            Max. time to wait in ms 
            </param>
            <param name="index">
            Index of the wait object signaled 
            </param>
            <returns>
            True if signaled else timeout 
            </returns>
            
            Wait until either any one of the wait objects in the set becomes signaled or the timeout expires. The variable pIndex is set to the index of the wait object that has been signaled. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsWaitForAllEx(PylonC.NET.PYLON_WAITOBJECTS_HANDLE,System.UInt32,System.Boolean)">
            <summary>
            Wait for all objects in a wait object set to become signaled. 
            </summary>
            <param name="hWos">
            Wait object set handle 
            </param>
            <param name="timeout">
            Max. time to wait in ms 
            </param>
            <param name="alertable">
            Boolean flag selecting alertable or non-alertable wait 
            </param>
            <returns>
            Wait result 
            </returns>
            
            Wait until either all wait objects in the set become signaled or the timeout expires. The alertable argument, if set to one, allows the wait to be interrupted. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectsWaitForAnyEx(PylonC.NET.PYLON_WAITOBJECTS_HANDLE,System.UInt32,System.UInt32@,System.Boolean)">
            <summary>
            Wait for any one object in a wait object set to become signaled. 
            </summary>
            <param name="hWos">
            Wait object set handle 
            </param>
            <param name="timeout">
            Max. time to wait in ms 
            </param>
            <param name="index">
            Index of the wait object signaled 
            </param>
            <param name="alertable">
            Bool: wait can be interrupted 
            </param>
            <returns>
            True if signaled else timeout 
            </returns>
            
            Wait until either any one of the wait objects in the set becomes signaled or the timeout expires. The return value indicates the reason why the function returned. The variable pIndex is set to the index of the wait object that has been signaled. The alertable argument, if set to one, allows the wait to be interrupted. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberOpen(PylonC.NET.PYLON_EVENTGRABBER_HANDLE)">
            <summary>
            Open an event grabber. 
            </summary>
            <param name="hEvg">
            Event grabber to open 
            </param>
            
            Open an event grabber for use. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberClose(PylonC.NET.PYLON_EVENTGRABBER_HANDLE)">
            <summary>
            Close an event grabber. 
            </summary>
            <param name="hEvg">
            Event grabber to close 
            </param>
            
            Close an event grabber after use. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberIsOpen(PylonC.NET.PYLON_EVENTGRABBER_HANDLE)">
            <summary>
            Return an event grabber's boolean 'open' status. 
            </summary>
            <param name="hEvg">
            Event grabber to check 
            </param>
            <returns>
            True if open 
            </returns>
            
            Check, whether an event grabber is currently open. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberGetWaitObject(PylonC.NET.PYLON_EVENTGRABBER_HANDLE)">
            <summary>
            Return an event grabber's wait object. 
            </summary>
            <param name="hEvg">
            Event grabber handle 
            </param>
            <returns>
            Handle of event grabber wait object 
            </returns>
            
            This function returns a wait object handle for an event grabber. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberGetNodeMap(PylonC.NET.PYLON_EVENTGRABBER_HANDLE)">
            <summary>
            Return an event grabber's parameter node map. 
            </summary>
            <param name="hEvg">
            Event grabber handle 
            </param>
            <returns>
            Handle of event grabber node map 
            </returns>
            
            Return a handle for the event grabber's parameter node map. If the event grabber does not support a node map an invalid handle is returned. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberGetNumBuffers(PylonC.NET.PYLON_EVENTGRABBER_HANDLE)">
            <summary>
            Return the number of event buffers used by an event grabber. 
            </summary>
            <param name="hEvg">
            Event grabber handle 
            </param>
            <returns>
            The number of event buffers 
            </returns>
            
            Returns the number of event buffers for an event grabber. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberSetNumBuffers(PylonC.NET.PYLON_EVENTGRABBER_HANDLE,System.UInt32)">
            <summary>
            Set the number of event buffers used by an event grabber. 
            </summary>
            <param name="hEvg">
            Event grabber handle 
            </param>
            <param name="numBuffers">
            New buffer count 
            </param>
            
            Set the number of event buffers for an event grabber. 
        </member>
        <member name="M:PylonC.NET.Pylon.ChunkParserDetachBuffer(PylonC.NET.PYLON_CHUNKPARSER_HANDLE)">
            <summary>
            Detach a data buffer from a chunk parser. 
            </summary>
            <param name="hChp">
            Chunk parser handle 
            </param>
            
            Detach data buffer from chunk parser. 
        </member>
        <member name="M:PylonC.NET.Pylon.ChunkParserHasCRC(PylonC.NET.PYLON_CHUNKPARSER_HANDLE)">
            <summary>
            Return true if CRC checksum chunk data is present. 
            </summary>
            <param name="hChp">
            Chunk parser handle 
            </param>
            <returns>
            True if data buffer has an attached checksum 
            </returns>
            
            Check, whether the chunk data buffer has an attached CRC checksum. 
        </member>
        <member name="M:PylonC.NET.Pylon.ChunkParserCheckCRC(PylonC.NET.PYLON_CHUNKPARSER_HANDLE)">
            <summary>
            Return true if CRC checksum chunk data is valid. 
            </summary>
            <param name="hChp">
            Chunk parser handle 
            </param>
            <returns>
            True if the checksum matches the data 
            </returns>
            
            Check, whether the chunk data buffer contains valid data using its CRC checksum. 
        </member>
        <member name="M:PylonC.NET.Pylon.PixelFormatConverterCreate(PylonC.NET.PYLON_DEVICE_HANDLE,System.Int32)">
            <summary>
            Deprecated: Create a pixel format converter. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="outAlign">
            Output buffer line alignment 
            </param>
            <returns>
            Handle of created format converter 
            </returns>
            
            Create a pixel format converter. The selection of the output format is based on the camera's native pixel format. All color formats are converted to RGBA (8888) with the 'A' component set to zero. All monochrome formats are converted to Mono8. The outAlign parameter can be used to enforce a particular address alignment of every line in the output buffer. The start address of every output buffer line will be an integer multiple of the outAlign argument. 
        </member>
        <member name="M:PylonC.NET.Pylon.PixelFormatConverterGetOutputBufferSize(PylonC.NET.PYLON_FORMAT_CONVERTER_HANDLE)">
            <summary>
            Deprecated: Compute required output buffer size for pixel format converter. 
            </summary>
            <param name="hConv">
            Format converter handle 
            </param>
            <returns>
            Result 
            </returns>
            
            Return the required result buffer size (in bytes) for a color converter. 
        </member>
        <member name="M:PylonC.NET.Pylon.PixelFormatConverterDestroy(PylonC.NET.PYLON_FORMAT_CONVERTER_HANDLE)">
            <summary>
            Deprecated: Delete a pixel format converter. 
            </summary>
            <param name="hConv">
            Pixel format converter handle 
            </param>
            
            Destroy a previously created pixel format converter. 
        </member>
        <member name="M:PylonC.NET.Pylon.BitsPerPixel(PylonC.NET.EPylonPixelType)">
            <summary>
            Return the number of bits per pixel for a pixel type. 
            </summary>
            <param name="pixelType">
            Pixel type 
            </param>
            <returns>
            The number of bits per pixel 
            </returns>
            
            Returns the number of bits required to store a single pixel for the given format. 
        </member>
        <member name="M:PylonC.NET.Pylon.IsMono(PylonC.NET.EPylonPixelType)">
            <summary>
            Return true if pixel format is monochrome. 
            </summary>
            <param name="pixelType">
            Pixel type 
            </param>
            <returns>
            True if monochrome 
            </returns>
            
            Returns a boolean result: True - pixel format is monochrome, false otherwise. 
        </member>
        <member name="M:PylonC.NET.Pylon.IsBayer(PylonC.NET.EPylonPixelType)">
            <summary>
            Return true if the pixel format is a Bayer format. 
            </summary>
            <param name="pixelType">
            Pixel type 
            </param>
            <returns>
            True if Bayer format 
            </returns>
            
            Returns a boolean result: True - the pixel format is a Bayer format, false otherwise. 
        </member>
        <member name="M:PylonC.NET.Pylon.PixelTypeFromString(System.String)">
            <summary>
            Translate a pixel type name to an enumeration value. 
            </summary>
            <param name="aString">
            String to be converted 
            </param>
            <returns>
            Pixel format type enumeration value 
            </returns>
            
            Converts a text string to a pixel format code that is returned. If the string cannot be converted, the result is set to PixelType_Undefined. 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectFromW32(Microsoft.Win32.SafeHandles.SafeWaitHandle,System.Boolean)">
            <summary>
            Create a wait object for an existing SafeWaitHandle object. 
            </summary>
            <param name="hW32">
            SafeWaitHandle object for a synchronization object 
            </param>
            <param name="duplicate">
            Bool: clone handle or not 
            </param>
            <returns>
            Handle of the wait object created from a SafeWaitHandle object 
            </returns>
            
            This function creates a wait object from a SafeWaitHandle object that represents a synchronization object (event, thread, etc.). If duplicate equals true, the handle is cloned and ownership of hW32 remains with the caller, otherwise, the wait object takes ownership of hW32. 
        </member>
        <member name="M:PylonC.NET.Pylon.FeaturePersistenceSave(PylonC.NET.NODEMAP_HANDLE,System.String)">
            <summary>
            Saves the node tree to a file. 
            </summary>
            <param name="hMap">
            Node map handle. 
            </param>
            <param name="fileName">
            Name of the file to store the node map values in. 
            </param>
            
            Sequence sets of a camera are automatically saved when SequenceEnable is activated. 
        </member>
        <member name="M:PylonC.NET.Pylon.FeaturePersistenceLoad(PylonC.NET.NODEMAP_HANDLE,System.String,System.Boolean)">
            <summary>
            Loads the features from a file and stores it to the node tree. 
            </summary>
            <param name="hMap">
            Node map handle. 
            </param>
            <param name="fileName">
            Name of the file containing the node map values. 
            </param>
            <param name="verify">
            If verify==true (default) all node values will be validated. 
            </param>
            
            Loads the features from a file and stores it to the node tree. 
        </member>
        <member name="M:PylonC.NET.Pylon.FeaturePersistenceLoadFromString(PylonC.NET.NODEMAP_HANDLE,System.String,System.Boolean)">
            <summary>
            Loads the features from a string and stores it to the node tree. 
            </summary>
            <param name="hMap">
            Node map handle. 
            </param>
            <param name="features">
            The string containing the node map values. 
            </param>
            <param name="verify">
            If verify==true (default) all node values will be validated. 
            </param>
            
            Loads the features from a string and stores it to the node tree. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterCreate">
            <summary>
            Creates an image format converter. 
            </summary>
            <returns>
            Handle for the image format converter. 
            </returns>
            
            Creates an image format converter and provides a handle for it. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterGetNodeMap(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE)">
            <summary>
            Gets the handle for node map of an image format converter. 
            </summary>
            <param name="hConv">
            Handle for the image format converter. 
            </param>
            <returns>
            Handle for the node map of the image format converter. 
            </returns>
            
            Gets the handle for node map of an image format converter. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterSetOutputPixelFormat(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE,PylonC.NET.EPylonPixelType)">
            <summary>
            Sets the output pixel format of an image format converter. 
            </summary>
            <param name="hConv">
            Handle for the image format converter. 
            </param>
            <param name="pixelType">
            The pixel type which defines the image format. 
            </param>
            
            Sets the output pixel format of an image format converter. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterGetOutputPixelFormat(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE)">
            <summary>
            Gets the output pixel format of an image format converter. 
            </summary>
            <param name="hConv">
            Handle for the image format converter. 
            </param>
            <returns>
            The pixel type which defines the image format. 
            </returns>
            
            Gets the output pixel format of an image format converter. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterSetOutputPaddingX(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE,System.UInt32)">
            <summary>
            Sets the padding, i. e. the number of additional data bytes at the end of each image row. 
            </summary>
            <param name="hConv">
            The handle to the image format converter. 
            </param>
            <param name="paddingX">
            The number of additional data bytes at the end of each image row. 
            </param>
            
            Sets the padding, i. e. the number of additional data bytes at the end of each image row. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterGetOutputPaddingX(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE)">
            <summary>
            Gets the padding, i. e. the number of additional data bytes at the end of each image row. 
            </summary>
            <param name="hConv">
            The handle to the image format converter. 
            </param>
            <returns>
            The number of additional data bytes at the end of each image row. 
            </returns>
            
            Gets the padding, i. e. the number of additional data bytes at the end of each image row. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterGetBufferSizeForConversion(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE,PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32)">
            <summary>
            Gets the buffer size for a converted image. 
            </summary>
            <param name="hConv">
            Handle for image format converter. 
            </param>
            <param name="sourcePixelType">
            Pixel type of source image. 
            </param>
            <param name="sourceWidth">
            Number of columns (in pixels) of source image. 
            </param>
            <param name="sourceHeight">
            Number of rows in (pixels) of source image. 
            </param>
            <returns>
            Buffer size which is necessary for converted source image. 
            </returns>
            
            Gets the buffer size for a converted image. The buffer size depends on the pixel type, the width and the height of the source image and the output padding. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterDestroy(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE)">
            <summary>
            Destroys an image format converter. 
            </summary>
            <param name="hConv">
            Handle of format converter. 
            </param>
            
            Destroys an image format converter. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterCreate">
            <summary>
            Creates an AVI writer object. 
            </summary>
            <returns>
            Handle for the AVI writer. 
            </returns>
            
            Creates an AVI writer object. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterDestroy(PylonC.NET.PYLON_AVI_WRITER_HANDLE)">
            <summary>
            Destroys an AVI writer object. 
            </summary>
            <param name="hWriter">
            Handle for the AVI writer. 
            </param>
            
            Destroys an AVI writer object. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterClose(PylonC.NET.PYLON_AVI_WRITER_HANDLE)">
            <summary>
            Closes the AVI file. 
            </summary>
            <param name="hWriter">
            Handle for the AVI writer. 
            </param>
            
            Closes the AVI file. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterIsOpen(PylonC.NET.PYLON_AVI_WRITER_HANDLE)">
            <summary>
            Returns the open state of the AVI file. 
            </summary>
            <param name="hWriter">
            Handle of AVI writer. 
            </param>
            <returns>
            The open state of the AVI file. 
            </returns>
            
            Destroys an AVI writer object. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterCanAddWithoutConversion(PylonC.NET.PYLON_AVI_WRITER_HANDLE,PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation)">
            <summary>
            Can be used to check whether the given image is added to the AVI file without prior conversion when Pylon.AviWriterAdd() is called. 
            </summary>
            <param name="hWriter">
            Handle for the AVI writer. 
            </param>
            <param name="pixelType">
            The pixel type of the image to save. 
            </param>
            <param name="width">
            The number of pixels in a row of the image to save. 
            </param>
            <param name="height">
            The number of rows of the image to save. 
            </param>
            <param name="paddingX">
            The number of extra data bytes at the end of each row. 
            </param>
            <param name="orientation">
            The vertical orientation of the image in the image buffer. 
            </param>
            <returns>
            True if the image can be added to the AVI stream without prior conversion. False if the image cannot be added at all. 
            </returns>
            
            Can be used to check whether the given image is added to the AVI file without prior conversion when Pylon.AviWriterAdd() is called. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterGetImageDataBytesWritten(PylonC.NET.PYLON_AVI_WRITER_HANDLE)">
            <summary>
            Provides access to the number of image data bytes written to the AVI file. 
            </summary>
            <param name="hWriter">
            Handle for the AVI writer. 
            </param>
            <returns>
            Returns the the number of image data bytes written to the the AVI File. Returns 0 if no AVI File has been written yet. This size does not contain the size of the AVI File Header and AVI File Index.
            </returns>
            
            This value is updated with each call to Pylon.AviWriterAdd(). 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterGetCountOfAddedImages(PylonC.NET.PYLON_AVI_WRITER_HANDLE)">
            <summary>
            Provides access to the number of images that have been added to the AVI file. 
            </summary>
            <param name="hWriter">
            Handle for the AVI writer. 
            </param>
            <returns>
            Returns the number of images added to the the AVI File. Returns 0 if no AVI File has been written yet.
            </returns>
            
            This value is updated with each call to Pylon.AviWriterAdd().
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowCreate(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a window for index passed in winIndex. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            <param name="x">
            The x-coordinate of the upper-left corner of the window in screen coordinates. You can pass the cPylonImageWindowUseDefault value to create the window at the same position as the previous one before it was closed. The other position parameters will be ignored. If the window is shown the very first time the system selects a default position and size for the window. 
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the window in screen-coordinates. 
            </param>
            <param name="nWidth">
            The width of the window in screen coordinates. 
            </param>
            <param name="nHeight">
            The height of the window in screen coordinates. 
            </param>
            
            Creates a window for index passed in winIndex. Valid window indices range from 0 to 31. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowHide(System.UInt32)">
            <summary>
            Hides the image window. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            
            This is a convenience function to hide the window. It is eqivalent to PylonImageWindowShow(winIndex, SW_HIDE). 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowClose(System.UInt32)">
            <summary>
            Closes and destroys the window. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            
            Closes and destroys the window. When the function returns successfully, the stored window index will be set to invalid. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceInfoGetPropertyValueByName(PylonC.NET.PYLON_DEVICE_INFO_HANDLE,System.String)">
            <summary>
            Return the value of a device property identified by its name. 
            </summary>
            <param name="hDi">
            Device info handle 
            </param>
            <param name="name">
            Property name 
            </param>
            <returns>
            The value of a device property identified by its name 
            </returns>
            
            This function returns the value of the device property identified by its name. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceInfoGetPropertyValueByIndex(PylonC.NET.PYLON_DEVICE_INFO_HANDLE,System.UInt32)">
            <summary>
            Return the value of a device property identified by its index. 
            </summary>
            <param name="hDi">
            Device info handle 
            </param>
            <param name="index">
            Property index 
            </param>
            <returns>
            The value of a device property identified by index
            </returns>
            
            This function returns the value of the device property identified by index index. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceInfoGetPropertyName(PylonC.NET.PYLON_DEVICE_INFO_HANDLE,System.UInt32)">
            <summary>
            Return the name of a device property identified by its index. 
            </summary>
            <param name="hDi">
            Device info handle 
            </param>
            <param name="index">
            Property index. This value must be in the range 0..(Pylon.DeviceInfoGetNumProperties()-1) 
            </param>
            <returns>
            The name of the device property identified by index
            </returns>
            
            This function returns the name of the device property identified by index index. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceFeatureToString(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return a feature's value as a string. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature pName 
            </param>
            <returns>
            Feature value as string 
            </returns>
            
            Look up a feature node with a given name and return its value as string. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceFeatureIsImplemented(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return boolean 'implemented' status for feature. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            True if implemented 
            </returns>
            
            Look up a feature node with a given name and and return its 'implemented' status. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceFeatureIsAvailable(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return boolean 'available' status for feature. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            True if available 
            </returns>
            
            Look up a feature node with a given name and and return its 'available' status. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceFeatureIsReadable(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return boolean 'readable' status for feature. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            True if readable 
            </returns>
            
            Look up a feature node with a given name and return its 'readable' status. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceFeatureIsWritable(PylonC.NET.PYLON_DEVICE_HANDLE,System.String)">
            <summary>
            Return boolean 'writable' status for feature. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="name">
            Feature name 
            </param>
            <returns>
            True if writable 
            </returns>
            
            Look up a feature node with a given name and and return its 'writable' status. 
        </member>
        <member name="M:PylonC.NET.Pylon.GigEGetPersistentIpAddress(PylonC.NET.PYLON_DEVICE_HANDLE,System.String@,System.String@,System.String@)">
            <summary>
            Reads the persistent IP address from the device. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="ipAddress">
            IP address, "dot notation", e.g., 192.168.1.2 
            </param>
            <param name="subnetMask">
            SubnetMask, "dot notation", eg. 255.255.255.0 
            </param>
            <param name="defaultGateway">
            DefaultGateway, "dot notation", e.g., 192.168.1.1 
            </param>
            
            Reads the persistent IP address from the device. 
        </member>
        <member name="M:PylonC.NET.Pylon.FeaturePersistenceSaveToString(PylonC.NET.NODEMAP_HANDLE)">
            <summary>
            Saves the node tree to a string. 
            </summary>
            <param name="hMap">
            Node map handle. 
            </param>
            <returns>
            The string to store the node map values in. 
            </returns>
            
            Saves the node tree to a string. 
        </member>
        <member name="M:PylonC.NET.Pylon.Initialize">
            <summary>
            Initialize the pylon.NET runtime system. 
            </summary>
            
            This function must be called at least once before any other pylon.NET functions are called. Its purpose is to set up internal structures used by the pylon.NET system. 
        </member>
        <member name="M:PylonC.NET.Pylon.Terminate">
            <summary>
            Shut down the pylon.NET runtime system. 
            </summary>
            
            Call this function when you are done using pylon.NET. Its purpose is to deallocate structures used by pylon.NET internally. After calling this function, no more pylon.NET functions may be called unless another call to Pylon.Initialize() is made first. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceGrabSingleFrame``1(PylonC.NET.PYLON_DEVICE_HANDLE,System.Int32,PylonC.NET.PylonBuffer{``0}@,PylonC.NET.PylonGrabResult_t@,System.UInt32)">
            <summary>
            Set the acquision mode to 'single frame' and grab one image. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="channel">
            Stream grabber channel to use 
            </param>
            <param name="buffer">
            Buffer receiving image data 
            </param>
            <param name="grabResult">
            Struct receiving the grab result 
            </param>
            <param name="timeout">
            Grab timeout in ms 
            </param>
            <returns>
            True if buffer ready 
            </returns>
            
            Grab a single image into the data buffer passed in buffer. Wait at most timeout milliseconds for the camera to produce an image. In case an uninitialized buffer is passed, new buffer memory is allocated in the required size. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberRegisterBuffer``1(PylonC.NET.PYLON_STREAMGRABBER_HANDLE,PylonC.NET.PylonBuffer{``0}@)">
            <summary>
            Attach an image data buffer to a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <param name="buffer">
            Image data buffer 
            </param>
            <returns>
            Handle for registered buffer 
            </returns>
            
            Register a data buffer with a stream grabber. This must be done before the buffer can be used to receive data. In case an uninitialized buffer is passed, new buffer memory is allocated in the required size. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberQueueBuffer(PylonC.NET.PYLON_STREAMGRABBER_HANDLE,PylonC.NET.PYLON_STREAMBUFFER_HANDLE,System.Int32)">
            <summary>
            Submit a data buffer to a stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <param name="hBuf">
            Data buffer handle 
            </param>
            <param name="context">
            Application context
            </param>
            
            Append the data buffer represented by hBuf to the stream grabber's queue. Continuously processing the queue, the stream grabber will fill the buffer with data as soon as all proceeding buffers have been processed. contextcan be used to attach application-specific data to a buffer. This argument will be returned unmodified along with the buffer when grabbing is done. 
        </member>
        <member name="M:PylonC.NET.Pylon.StreamGrabberRetrieveResult(PylonC.NET.PYLON_STREAMGRABBER_HANDLE,PylonC.NET.PylonGrabResult_t@)">
            <summary>
            Retrieve buffer after processing by stream grabber. 
            </summary>
            <param name="hStg">
            Stream grabber handle 
            </param>
            <param name="grabResult">
            Grab result data 
            </param>
            <returns>
            True if buffer ready 
            </returns>
            
            Calling this function returns a boolean status, indicating whether at least one data buffer has been filled with data. If so, information about the first of such buffers is returned in the result struct. 
        </member>
        <member name="M:PylonC.NET.Pylon.PixelFormatConverterConvert``2(PylonC.NET.PYLON_FORMAT_CONVERTER_HANDLE,PylonC.NET.PylonBuffer{``0}@,PylonC.NET.PylonBuffer{``1})">
            <summary>
            Convert pixel data to a different format. 
            </summary>
            <param name="hConv">
            Pixel format converter handle 
            </param>
            <param name="targetBuffer">
            Destination data buffer 
            </param>
            <param name="sourceBuffer">
            Source data buffer 
            </param>
            
            Convert pixel data from the source buffer, writing result to the destination buffer. In case an uninitialized target buffer is passed, new buffer memory is allocated with the required size. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageFormatConverterConvert``1(PylonC.NET.PYLON_IMAGE_FORMAT_CONVERTER_HANDLE,PylonC.NET.PylonBuffer{``0}@,PylonC.NET.PylonBuffer{``0},PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation)">
            <summary>
            Converts an image. 
            </summary>
            <param name="hConv">
            Handle for image format converter. 
            </param>
            <param name="targetBuffer">
            Buffer for converted image data. If null, a buffer is created. 
            </param>
            <param name="sourceBuffer">
            Buffer of source image data. 
            </param>
            <param name="sourcePixelType">
            Pixel type of source image. 
            </param>
            <param name="sourceWidth">
            Number of columns (in pixels) of source image. 
            </param>
            <param name="sourceHeight">
            Number of rows (in pixels) of source image. 
            </param>
            <param name="sourcePaddingX">
            The number of additional data bytes at the end of each image row. 
            </param>
            <param name="sourceOrientation">
            The vertical orientation of the source image in the image buffer. The default value is usually ImageOrientation_TopDown. 
            </param>
            
            Converts an image. The buffer size of the target image can be determined by PylonImageFormatConverterGetBufferSizeForConversion. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventGrabberRetrieveEvent(PylonC.NET.PYLON_EVENTGRABBER_HANDLE,PylonC.NET.PylonEventResult_t@)">
            <summary>
            Retrieve an event from an event grabber. 
            </summary>
            <param name="hEvg">
            Event grabber handle 
            </param>
            <param name="eventResult">
            Event result data struct 
            </param>
            <returns>
            True if at least one event is available 
            </returns>
            
            Calling this function returns a boolean status, indicating whether at least one event is available. If so, the event is returned in the result struct. 
        </member>
        <member name="M:PylonC.NET.Pylon.EventAdapterDeliverMessage(PylonC.NET.PYLON_EVENTADAPTER_HANDLE,PylonC.NET.PylonEventResult_t)">
            <summary>
            Process event messages. 
            </summary>
            <param name="hEva">
            Event adapter handle 
            </param>
            <param name="eventResult">
            Event buffer to process 
            </param>
            
            Pass an event buffer to an event adapter. The events in the buffer will be processed, updating properties of the device associated with the event adapter. 
        </member>
        <member name="M:PylonC.NET.Pylon.ChunkParserAttachBuffer``1(PylonC.NET.PYLON_CHUNKPARSER_HANDLE,PylonC.NET.PylonBuffer{``0})">
            <summary>
            Attach a data buffer to a chunk parser. 
            </summary>
            <param name="hChp">
            Chunk parser handle 
            </param>
            <param name="buffer">
            Data buffer 
            </param>
            
            Attach a data buffer containing chunk data to a chunk parser. 
        </member>
        <member name="M:PylonC.NET.Pylon.ChunkParserUpdateBuffer``1(PylonC.NET.PYLON_CHUNKPARSER_HANDLE,PylonC.NET.PylonBuffer{``0})">
            <summary>
            Replace a data buffer attached to a chunk parser. 
            </summary>
            <param name="hChp">
            Chunk parser handle 
            </param>
            <param name="buffer">
            Data buffer 
            </param>
            
            Replace any data buffer currently attached to a chunk parser with another one of identical layout. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceDeregisterRemovalCallback(PylonC.NET.PYLON_DEVICE_HANDLE,PylonC.NET.PYLON_DEVICECALLBACK_HANDLE)">
            <summary>
            Unregister device removal callback. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="hCb">
            Callback handle 
            </param>
            
            Detach a device removal callback from a device. 
        </member>
        <member name="M:PylonC.NET.Pylon.DeviceRegisterRemovalCallback(PylonC.NET.PYLON_DEVICE_HANDLE,PylonC.NET.DeviceCallbackHandler)">
            <summary>
            Register device removal callback. 
            </summary>
            <param name="hDev">
            Device handle 
            </param>
            <param name="cbFunction">
            Callback handler 
            </param>
            <returns>
            Callback handle 
            </returns>
            
            Register a device removal callback on the device. The callback function will be called when the device is removed (unplugged). When the callback is fired all subsequent calls to functions which need to communicate with the device will fail.
        </member>
        <member name="M:PylonC.NET.Pylon.DestroyDevice(PylonC.NET.PYLON_DEVICE_HANDLE)">
            <summary>
            Delete a device object. 
            </summary>
            <param name="hDev">
            Device object handle 
            </param>
            
            This function destroys a device object previously created by Pylon.CreateDeviceByIndex(). 
        </member>
        <member name="M:PylonC.NET.Pylon.WaitObjectGetW32Handle(PylonC.NET.PYLON_WAITOBJECT_HANDLE)">
            <summary>
            Return a SafeWaitHandle object for a wait object. 
            </summary>
            <param name="hWobj">
            Wait object handle 
            </param>
            <returns>
            SafeWaitHandle object 
            </returns>
            
            This function returns a SafeWaitHandle object containing a Win32 Handle owned by the wait object. The handle returned is still owned by the wait object, so do not close it. 
        </member>
        <member name="M:PylonC.NET.Pylon.DevicePortRead``1(PylonC.NET.PYLON_DEVICE_HANDLE,PylonC.NET.PylonBuffer{``0}@,System.Int64,System.UInt32)">
            <summary>
            Perform a raw read on the standard "Device"-node port. 
            </summary>
            <param name="hDev">
            Node of the port to read from. Use GenApiNodeMapGetNode to get the nodehandle. 
            </param>
            <param name="buffer">
            Points to the buffer to copy the data to. 
            </param>
            <param name="Address">
            Address to start reading data from. 
            </param>
            <param name="Length">
            Number of bytes to read starting at Address. 
            </param>
            
            Reads raw data from the "Device" port. Specify the address from where to read data. The count of data bytes passed in Length is read. The data read will be written to the buffer passed in pBuffer. Make sure the buffer has at least a size of Length-bytes. 
        </member>
        <member name="M:PylonC.NET.Pylon.DevicePortWrite``1(PylonC.NET.PYLON_DEVICE_HANDLE,PylonC.NET.PylonBuffer{``0},System.Int64,System.UInt32)">
            <summary>
            Perform a raw write on the standard "Device"-node port. 
            </summary>
            <param name="hDev">
            Node of the port to write to. Use GenApiNodeMapGetNode to get the nodehandle. 
            </param>
            <param name="buffer">
            Points to the buffer to read the data from. 
            </param>
            <param name="Address">
            Address to start writing the data to. 
            </param>
            <param name="Length">
            Number of bytes to write starting at Address. 
            </param>
            
            Writes raw data to the "Device" port. Specify the address from where to read data. The count of data bytes passed in Length is read. The data read will be read from the buffer passed in pBuffer. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImagePersistenceSave``1(PylonC.NET.EPylonImageFileFormat,System.String,PylonC.NET.PylonBuffer{``0},PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation,PylonC.NET.PylonImagePersistenceOptions_t)">
            <param name="options">
            The image persistence save options. This parameter can be null.
            </param>
            <summary>
            Saves the image to disk. Converts the image to a format that can be saved if required. 
            </summary>
            <param name="imageFileFormat">
            The file format to save the image in. 
            </param>
            <param name="filename">
            Name and path of the image. 
            </param>
            <param name="buffer">
            Buffer which contains the image data. 
            </param>
            <param name="pixelType">
            The pixel type of the image to save. 
            </param>
            <param name="width">
            The number of pixels in a row of the image to save. 
            </param>
            <param name="height">
            The number of rows of the image to save. 
            </param>
            <param name="paddingX">
            The number of extra data bytes at the end of each row. 
            </param>
            <param name="orientation">
            The vertical orientation of the image in the image buffer. 
            </param>
            If required, the image is automatically converted to a new image and then saved. See CanSaveWithoutConversion() for more information. An image with a bit depth higher than 8 bit is stored with 16 bit bit depth if supported by the image file format. In this case the pixel data is MSB aligned.
        </member>
        <member name="M:PylonC.NET.Pylon.ImagePersistenceSave``1(PylonC.NET.EPylonImageFileFormat,System.String,PylonC.NET.PylonBuffer{``0},PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation)">
            <summary>
            Saves the image to disk. Converts the image to a format that can be saved if required. 
            </summary>
            <param name="imageFileFormat">
            The file format to save the image in. 
            </param>
            <param name="filename">
            Name and path of the image. 
            </param>
            <param name="buffer">
            Buffer which contains the image data. 
            </param>
            <param name="pixelType">
            The pixel type of the image to save. 
            </param>
            <param name="width">
            The number of pixels in a row of the image to save. 
            </param>
            <param name="height">
            The number of rows of the image to save. 
            </param>
            <param name="paddingX">
            The number of extra data bytes at the end of each row. 
            </param>
            <param name="orientation">
            The vertical orientation of the image in the image buffer. 
            </param>
            If required, the image is automatically converted to a new image and then saved. See CanSaveWithoutConversion() for more information. An image with a bit depth higher than 8 bit is stored with 16 bit bit depth if supported by the image file format. In this case the pixel data is MSB aligned.
        </member>
        <member name="M:PylonC.NET.Pylon.ImagePersistenceLoad``1(System.String,PylonC.NET.PylonBuffer{``0}@,System.IntPtr@,PylonC.NET.EPylonPixelType@,System.UInt32@,System.UInt32@,System.UInt32@,PylonC.NET.EPylonImageOrientation@)">
            <summary>
            Loads an image from disk. 
            </summary>
            <param name="filename">
            Name and path of the image. 
            </param>
            <param name="buffer">
            Buffer to be used. If null, a buffer is created. 
            </param>
            <param name="bufferSize">
            Returns the required buffer size. 
            </param>
            <param name="pixelType">
            Pixel type of the loaded image or PixelType_Undefined if the image is invalid. 
            </param>
            <param name="width">
            The current number of columns (in pixels) of the loaded image or 0 if the image is invalid. 
            </param>
            <param name="height">
            The current number of rows (in pixels) of the loaded image or 0 if the image is invalid. 
            </param>
            <param name="paddingX">
            The number of extra data bytes at the end of each row or 0 if the image is invalid. 
            </param>
            <param name="orientation">
            The orientation of the image or ImageOrientation_TopDown if the image is invalid. 
            </param>
            
            Load an image from a file. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterAdd``1(PylonC.NET.PYLON_AVI_WRITER_HANDLE,PylonC.NET.PylonBuffer{``0},PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation,PylonC.NET.EPylonKeyFrameSelection)">
            <summary>
            Adds an image to the AVI file. 
            </summary>
            <param name="hWriter">
            Handle for the AVI writer. 
            </param>
            <param name="buffer">
            The pointer to the buffer of the image. 
            </param>
            <param name="pixelType">
            The pixel type of the image to save. 
            </param>
            <param name="width">
            The number of pixels in a row of the image to save. 
            </param>
            <param name="height">
            The number of rows of the image to save. 
            </param>
            <param name="paddingX">
            The number of extra data bytes at the end of each row. 
            </param>
            <param name="orientation">
            The vertical orientation of the image in the image buffer. 
            </param>
            <param name="keyFrameSelection">
            Can be used to control key frame selection for compressed images if needed. 
            </param>
            
            Adds an image to the AVI file. 
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterOpen(PylonC.NET.PYLON_AVI_WRITER_HANDLE,System.String,System.Double,PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation)">
            <summary>
            Opens an AVI file for writing.
            </summary>
            <param name="hWriter">
            Handle for the AVI writer.
            </param>
            <param name="filename">
            Name and path of the filename
            </param>
            <param name="framesPerSecondPlayback">
            The frame rate (play back frame rate) of the AVI file when shown in a media player.
            </param>
            <param name="pixelType">
            The pixel type of the image in the AVI file.
            </param>
            <param name="width">
            width  The number of pixels in a row.
            </param>
            <param name="height">
            The number of rows of the image.
            </param>
            <param name="orientation">
            The vertical orientation of the image data in the AVI file.
            </param>
        </member>
        <member name="M:PylonC.NET.Pylon.AviWriterOpen(PylonC.NET.PYLON_AVI_WRITER_HANDLE,System.String,System.Double,PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation,PylonC.NET.PylonAviCompressionOptions_t@)">
            <summary>
            Opens an AVI file for writing. 
            </summary>
            <param name="hWriter">
            Handle for the AVI writer. 
            </param>
            <param name="filename">
            Name and path of he filename 
            </param>
            <param name="framesPerSecondPlayback">
            The frame rate (play back frame rate) of the AVI file when shown in a media player. 
            </param>
            <param name="pixelType">
            The pixel type of the image in the AVI file. 
            </param>
            <param name="width">
            The number of pixels in a row. 
            </param>
            <param name="height">
            The number of rows of the image. 
            </param>
            <param name="orientation">
            The vertical orientation of the image data in the AVI file. 
            </param>
            <param name="compressionOptions">
            Compression can be enabled by passing compression options. See SPylonAviCompressionOptions_t. 
            </param>
            
            Destroys an AVI writer object. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowSetImage``1(System.UInt32,PylonC.NET.PylonBuffer{``0},PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation)">
            <summary>
            Sets the image of a window. The image is given by a buffer. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            <param name="buffer">
            Data buffer pointer 
            </param>
            <param name="pixelType">
            Pixel type 
            </param>
            <param name="width">
            The number of pixels in a row of the image to save. 
            </param>
            <param name="height">
            The number of rows of the image to save. 
            </param>
            <param name="paddingX">
            The number of extra data bytes at the end of each row. 
            </param>
            <param name="orientation">
            The vertical orientation of the image in the image buffer. 
            </param>
            
            Sets the image of a window. The image is given by a buffer and the appropriate values for width, height, padding, and orientation. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowGetWindowHandle(System.UInt32)">
            <summary>
            Gets the handle to a window identified by an index. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            <returns>
            The handle to the window with index winIndex. 
            </returns>
            
            Gets the handle to a window identified by an index. The window referred to by winIndex must be valid. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowShow(System.UInt32,System.Int32)">
            <summary>
            Shows or hides the image window. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            <param name="nShow">
            Pass same values for this parameter as described in the official documentation for ShowWindow(). 
            </param>
            
            This function calls ShowWindow from the Windows API. Pass the same values for the nShow parameter as described in the official documentation for ShowWindow() The value SW_SHOW will show the window in its current state and position. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowShow(System.UInt32)">
            <summary>
            Shows the image window. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            
            This function is for convenience and is equivalent to ImageWindowShow(\a winIndex, \a EPylonShowWindow.EPylonShowWindow_SW_SHOW).
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowDisplayImage``1(System.UInt32,PylonC.NET.PylonBuffer{``0},PylonC.NET.EPylonPixelType,System.UInt32,System.UInt32,System.UInt32,PylonC.NET.EPylonImageOrientation)">
            <summary>
            Displays the image of a window. The raw data of the image is given by a buffer. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            <param name="buffer">
            Data buffer pointer 
            </param>
            <param name="pixelType">
            Pixel type 
            </param>
            <param name="width">
            The number of pixels in a row of the image to save. 
            </param>
            <param name="height">
            The number of rows of the image to save. 
            </param>
            <param name="paddingX">
            The number of extra data bytes at the end of each row. 
            </param>
            <param name="orientation">
            The vertical orientation of the image in the image buffer. 
            </param>
            
            Sets the image of a window. The image is given by a buffer and the appropriate values for width, height, padding, and orientation. 
        </member>
        <member name="M:PylonC.NET.Pylon.ImageWindowDisplayImage``1(System.UInt32,PylonC.NET.PylonBuffer{``0},PylonC.NET.PylonGrabResult_t)">
            <summary>
            Displays the image in an image window. 
            </summary>
            <param name="winIndex">
            The window used for displaying the image. Valid window indices range from 0 to 31. 
            </param>
            <param name="buffer">
            The image buffer. 
            </param>
            <param name="grabResult">
            The grab result.
            </param>
            
            This function is for convenience and is equivalent to PylonImageWindowDisplayImage((IntPtr)winIndex, buffer.Pointer, (IntPtr)buffer.SizeByte, grabResult.PixelType, checked((uint)grabResult.SizeX), checked((uint)grabResult.SizeY), (IntPtr)grabResult.PaddingX, EPylonImageOrientation.ImageOrientation_TopDown).
        </member>
        <member name="M:PylonC.NET.Pylon.GigEIssueActionCommand(System.UInt32,System.UInt32,System.UInt32,System.String)">
             <summary>
             Issue an action command via broadcast. 
             </summary>
             <param name="deviceKey">
             The device key addresses devices managed by an application. The device key is only known to the application controlling its camera devices and it ensures that only this application can trigger the camera devices. Therefore the device key cannot be read from a device. An exact match of the send deviceKey and the device key stored in a device is required for executing an action.
             </param>
             <param name="groupKey">
             The group key is used to create groups of devices or actions. An exact match of the send groupKey and the group key stored in a device for an action is required for executing an action.
             </param>
             <param name="groupMask">
             The groupMask is a bit mask that allows to send an action to a subgroup of the devices addressed by the deviceKeygroupKey pair. The result of a bitwise AND operation of groupMask and the group mask stored in a device for an action must be non-zero for executing an action.
             </param>
             <param name="broadcastAddress">
             BroadcastAddress in dot notation where the command will be broadcast to, e.g. 255.255.255.255 (all adapters, default), 192.168.1.255 (all devices in a single subnet 192.168.1.xxx), 192.168.1.38 (single device). See the note below.
             </param>
             
             The action command feature lets you trigger actions in multiple devices (e.g. cameras) at roughly the same time or at a defined point in time (scheduled action command) by using a single broadcast protocol message (without extra cabling). Action commands are used in cameras in the same way as for example the digital input lines.
            
            \note If a Microsoft Windows operating system is used, sending a broadcast out on multiple network interfaces 
            is executed for each interface sequentially. That's why additional latency is added to the execution time 
            of a command, when sending a broadcast message over a wider broadcast address range than needed, e.g. when using
            the broadcast address 255.255.255.255.
        </member>
        <member name="M:PylonC.NET.Pylon.GigEIssueActionCommand(System.UInt32,System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,PylonC.NET.PylonGigEActionCommandResult_t[]@)">
             <summary>
             Issue an action command via broadcast. 
             </summary>
             <param name="deviceKey">
             The device key addresses devices managed by an application. The device key is only known to the application controlling its camera devices and it ensures that only this application can trigger the camera devices. Therefore the device key cannot be read from a device. An exact match of the send deviceKey and the device key stored in a device is required for executing an action.
             </param>
             <param name="groupKey">
             The group key is used to create groups of devices or actions. An exact match of the send groupKey and the group key stored in a device for an action is required for executing an action.
             </param>
             <param name="groupMask">
             The groupMask is a bit mask that allows to send an action to a subgroup of the devices addressed by the deviceKeygroupKey pair. The result of a bitwise AND operation of groupMask and the group mask stored in a device for an action must be non-zero for executing an action.
             </param>
             <param name="broadcastAddress">
             BroadcastAddress in dot notation where the command will be broadcast to, e.g. 255.255.255.255 (all adapters, default), 192.168.1.255 (all devices in a single subnet 192.168.1.xxx), 192.168.1.38 (single device). See the note below.
             </param>
             <param name="timeoutMs">
             Time in milliseconds the call is waiting for acknowledges of the addressed devices. Waiting for acknowledges is stopped if NumResults have been received.
             </param>
             <param name="numResults">
             The value passed should be equal to the expected number of devices to acknowledge the command.
             </param>
             <param name="results">
             Returns the action command result status.
             </param>
             If a Microsoft Windows operating system is used, sending a broadcast out on multiple network interfaces is executed for each interface sequentially. That's why additional latency is added to the execution time of a command, when sending a broadcast message over a wider broadcast address range than required, e.g. when using the broadcast address 255.255.255.255.IP4 addresses must be used. groupMask must not be 0. numResult 0 if a timeoutMs value other than 0 is passed. 
             The function is thread-safe. 
             <returns>
             Returns true if numResults have been received and the \c Status of all results is \c PylonGigEActionCommandStatus_Ok.
             </returns>
            
            \note If a Microsoft Windows operating system is used, sending a broadcast out on multiple network interfaces 
            is executed for each interface sequentially. That's why additional latency is added to the execution time 
            of a command, when sending a broadcast message over a wider broadcast address range than needed, e.g. when using
            the broadcast address 255.255.255.255.
        </member>
        <member name="M:PylonC.NET.Pylon.GigEIssueScheduledActionCommand(System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.String)">
             <summary>
             Issue a scheduled action command via broadcast. 
             </summary>
             <param name="deviceKey">
             The device key addresses devices managed by an application. The device key is only known to the application controlling its camera devices and it ensures that only this application can trigger the camera devices. Therefore the device key cannot be read from a device. An exact match of the send deviceKey and the device key stored in a device is required for executing an action.
             </param>
             <param name="groupKey">
             The group key is used to create groups of devices or actions. An exact match of the send groupKey and the group key stored in a device for an action is required for executing an action.
             </param>
             <param name="groupMask">
             The groupMask is a bit mask that allows to send an action to a subgroup of the devices addressed by the deviceKeygroupKey pair. The result of a bitwise AND operation of groupMask and the group mask stored in a device for an action must be non-zero for executing an action.
             </param>
             <param name="actiontimeNs">
             Time in nanoseconds when the action shall to be executed. The actual value depends on the used master clock. A master clock value can be obtained for instance for a set of synchronized camera devices by reading the timestamp value (GevTimestampValue) after latching the timestamp value (GevTimestampControlLatch) from one camera device of the set
             </param>
             <param name="broadcastAddress">
             BroadcastAddress in dot notation where the command will be broadcast to, e.g. 255.255.255.255 (all adapters, default), 192.168.1.255 (all devices in a single subnet 192.168.1.xxx), 192.168.1.38 (single device). See the note below.
             </param>
             
             The action command feature lets you trigger actions in multiple devices (e.g. cameras) at roughly the same time or at a defined point in time (scheduled action command) by using a single broadcast protocol message (without extra cabling). Action commands are used in cameras in the same way as for example the digital input lines.
            
            \note If a Microsoft Windows operating system is used, sending a broadcast out on multiple network interfaces 
            is executed for each interface sequentially. That's why additional latency is added to the execution time 
            of a command, when sending a broadcast message over a wider broadcast address range than needed, e.g. when using
            the broadcast address 255.255.255.255.
        </member>
        <member name="M:PylonC.NET.Pylon.GigEIssueScheduledActionCommand(System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.String,System.UInt32,System.UInt32,PylonC.NET.PylonGigEActionCommandResult_t[]@)">
             <summary>
             Issue a scheduled action command via broadcast. 
             </summary>
             <param name="deviceKey">
             The device key addresses devices managed by an application. The device key is only known to the application controlling its camera devices and it ensures that only this application can trigger the camera devices. Therefore the device key cannot be read from a device. An exact match of the send deviceKey and the device key stored in a device is required for executing an action.
             </param>
             <param name="groupKey">
             The group key is used to create groups of devices or actions. An exact match of the send groupKey and the group key stored in a device for an action is required for executing an action.
             </param>
             <param name="groupMask">
             The groupMask is a bit mask that allows to send an action to a subgroup of the devices addressed by the deviceKeygroupKey pair. The result of a bitwise AND operation of groupMask and the group mask stored in a device for an action must be non-zero for executing an action.
             </param>
             <param name="actiontimeNs">
             Time in nanoseconds when the action is to be executed. The actual value depends on the used master clock. A master clock value can be obtained for instance for a set of synchronized camera devices by reading the timestamp value (GevTimestampValue) after latching the timestamp value (GevTimestampControlLatch) from one camera device of the set.
             </param>
             <param name="broadcastAddress">
             BroadcastAddress in dot notation where the command will be broadcast to, e.g. 255.255.255.255 (all adapters, default), 192.168.1.255 (all devices in a single subnet 192.168.1.xxx), 192.168.1.38 (single device). See the note below.
             </param>
             <param name="timeoutMs">
             Time in milliseconds the call is waiting for acknowledges of the addressed devices. Waiting for acknowledges is stopped if NumResults have been received.
             </param>
             <param name="numResults">
             The value passed should be equal to the expected number of devices to acknowledge the command.
             </param>
             <param name="results">
             Returns the action command result status.
             </param>
             If a Microsoft Windows operating system is used, sending a broadcast out on multiple network interfaces is executed for each interface sequentially. That's why additional latency is added to the execution time of a command, when sending a broadcast message over a wider broadcast address range than required, e.g. when using the broadcast address 255.255.255.255.IP4 addresses must be used. groupMask must not be 0. numResult 0 if a timeoutMs value other than 0 is passed. actionTimeNs must be smaller than or equal INT64_MAX. 
             The function is thread-safe. 
             <returns>
             Returns true if numResults have been received and the \c Status of all results is \c PylonGigEActionCommandStatus_Ok.
             </returns>
            
            \note If a Microsoft Windows operating system is used, sending a broadcast out on multiple network interfaces 
            is executed for each interface sequentially. That's why additional latency is added to the execution time 
            of a command, when sending a broadcast message over a wider broadcast address range than needed, e.g. when using
            the broadcast address 255.255.255.255.
        </member>
    </members>
</doc>
