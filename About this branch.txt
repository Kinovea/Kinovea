2011-07-18
Start of a completely new framework for color and style.

Philosophy:
- The list of tools might be dynamic some day.
- Thus, the color and style configuration dialogs shouldn't know about individual tools and drawings.
- Even for core tools, the implementer shouldn't worry about how the style might be updated.
- Implementer should "declare" his needs in terms of styling and the edition should be handled by the framework.

Issue:
- Style is composed of several unrelated types (size, color, width, or more complex types)
- But we need to see them in a generic way.

Design:
- All the tools are collected in a global list, each screen will then filter this list according to its needs/capabilities.
- Each drawing and drawing tool will have a style object.
- Style object themselves are very dynamic, they are just a list of style elements.
- Style elements are atomic, they are for example, a line width, or a color.
- Style elements wrap atomic types and host a graphical editor to provide UI value change service.

With this framework:
- It's possible to have an object with arbitrary styling elements.
- Once the style element list is declared, we just have to care about how to actually apply the style to the object, not how the style itself will be updated.
- Drawing and drawing tools can use similar styling concepts: tool preset can be pushed directly to the drawing constructor.

Done at this point: 
- Start of work from the tools side.
- Adding style elements.
- List of style presets for tools.

Todo:
- Implement line shape and pen size editors.
- Serialization to xml.
- Use a style object in drawings, use it to draw the actual shape.
- Push tool style preset through drawing constructor.
- Update the configuration dialog to the new framework. The right click with drawing activated should be redirected to the tool preset dialog.

--------------------------------------------------------------------------------
2011-07-17
Resources for drawings put in a separate .resx file

--------------------------------------------------------------------------------
2011/04/16
Attached drawings:
- Save tool type in the button Tag property -> Group all event handler into one for tool selection.
- Introduction of the Capabilities concept implemented by each drawing, to know which generic context menu we should show (configure, fading, opacity).
- When drawing have specific right click menu (like "ShowÂ Measure") they are stored inside the drawing itself and added dynamically on right click.
- Port of these simplifications to the Capture screen. (+ port of the ToolPointer variable simplification).
- Migration of the LocateForm helper function to ScreenManagerKernel, so it's not duplicated between screens.
- Migration of the showmeasure and show coordinates flags into the corresponding tools as static properties. (previously as bool in each screen UI)

TODO: fix color profile mess.

--------------------------------------------------------------------------------
2011/04/07
Unattached drawings:
- Tracks merged into the list of ExtraDrawings.
- Fixed Chrono commands (undo/redo for add, delete, modify).
- Fixed Tracks commands (undo/redo for delete, delete end).

--------------------------------------------------------------------------------
2011/04/07 - Actual branch creation under SVN

Done at this point:

1. For Attached drawings
- AbstractDrawing stripped of non universally implemented methods.
- Creation of a few interfaces for decorations (line style, color), xml export, setup of the tool.
- Adaptation of all existing drawings to this new framework.


2. For Unattached drawings
- Grid & Plane (same class) to conform and inherit AbstractDrawing.
- Metadata.SetLocations replaces Metadata.Plane.SetLocations and Metadata.Grid.SetLocations, to avoid exposing Grid and Plane to the outside.
- Concept of ExtraDrawings list in Metadata to hold all the unattached drawings and treat them as a list.
- Chronometer objects (already conformant to AbstractDrawing) are added to the extra drawings list.
- hit test, move and movehandle in left click (Pointer tool) use the new extra drawing list instead of separate treatments for Grids and Chrono.
- Temporarily Deactivated undo/redo support for Chronometer add, delete, modify.
- Track made conformant to AbstractDrawing.


--------------------------------------------------------------------------------
2011/04/05 - Sandbox branch

This branch is to work on a refactoring of the drawing and drawing tools framework.
As a number of tools will be considered for addition, the ease of these addition is questionned.

The problem
-----------
It is not particularly easy to add drawing tools and doing so implies modifications in many parts of the code.

Drawings are either attached to a key image (angle, line, Svg), or unattached (Track, Magnifier).
For the unattached drawings, there are unique tools (magnifier, grid, plane) and tools creating multiple instances (track, later spotlight).

Some drawings are somewhat hybrids (Chronometer).
The unattached drawings are not homogenous, there is a lot of code duplication for hit testing, they don't follow a similar interface etc.
Attached drawings herit from a class with functions not implemented by all tools. (decoration, xml export)

The approach
------------
- Unattached drawings will conform to a similar interface. It is supposed that they can actually inherit from the same type as the attached drawings (AbstractDrawing).
- We will try to treat all unattached drawings at once everywhere, using their parent type.
- Unattached drawings creating multiple instances will work with a single Manager that will proxy the requests to the individual instances.
- Attached drawings will implement a core interface and then have their extra functions defined in interfaces.
